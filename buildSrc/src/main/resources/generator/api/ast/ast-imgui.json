{
  "info" : {
    "source" : "include/imgui/imgui.h",
    "hash" : "8886efea5fb276ad2573e1d271abf274",
    "url" : "https://github.com/ocornut/imgui",
    "revision" : "9cd9c2eff99877a3f10a7f9c2a3a5b9c15ea36c6"
  },
  "decls" : [ {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawChannel",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Forward declarations"
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImVec2",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " ImVec2: 2D vector used to store positions, sizes etc. [Compile-time configurable type]"
        }, {
          "@type" : "AstTextComment",
          "text" : " This is a frequently used type in the API. Consider using IM_VEC2_CLASS_EXTRA to create implicit cast from/to our preferred type."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "x",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "y",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImVec4",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " ImVec4: 4D vector used to store clipping rectangles, colors etc. [Compile-time configurable type]"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "x",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "y",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "z",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "w",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstNamespaceDecl",
    "name" : "ImGui",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " [SECTION] Dear ImGui end-user API functions"
        }, {
          "@type" : "AstTextComment",
          "text" : " (Note that ImGui:: being a namespace, you can add extra ImGui:: functions in your own separate file. Please don't modify imgui source files!)"
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CreateContext",
      "resultType" : "ImGuiContext *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "shared_font_atlas",
        "qualType" : "ImFontAtlas *",
        "desugaredQualType" : "ImFontAtlas *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Context creation and access"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Each context create its own ImFontAtlas by default. You may instance one yourself and pass it to CreateContext() to share a font atlas between contexts."
          }, {
            "@type" : "AstTextComment",
            "text" : " - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()"
          }, {
            "@type" : "AstTextComment",
            "text" : "   for each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for details."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DestroyContext",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ctx",
        "qualType" : "ImGuiContext *",
        "desugaredQualType" : "ImGuiContext *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCurrentContext",
      "resultType" : "ImGuiContext *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCurrentContext",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ctx",
        "qualType" : "ImGuiContext *",
        "desugaredQualType" : "ImGuiContext *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetIO",
      "resultType" : "ImGuiIO &",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Main"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetStyle",
      "resultType" : "ImGuiStyle &"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "NewFrame",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndFrame",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Render",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetDrawData",
      "resultType" : "ImDrawData *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowDemoWindow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Demo, Debug, Information"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowMetricsWindow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowDebugLogWindow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowStackToolWindow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowAboutWindow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowStyleEditor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ref",
        "qualType" : "ImGuiStyle *",
        "desugaredQualType" : "ImGuiStyle *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowStyleSelector",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowFontSelector",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ShowUserGuide",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetVersion",
      "resultType" : "const char *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "StyleColorsDark",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "dst",
        "qualType" : "ImGuiStyle *",
        "desugaredQualType" : "ImGuiStyle *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Styles"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "StyleColorsLight",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "dst",
        "qualType" : "ImGuiStyle *",
        "desugaredQualType" : "ImGuiStyle *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "StyleColorsClassic",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "dst",
        "qualType" : "ImGuiStyle *",
        "desugaredQualType" : "ImGuiStyle *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Begin",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Windows"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Begin() = push window to the stack and start appending to it. End() = pop window from the stack."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Passing 'bool* p_open != NULL' shows a window-closing widget in the upper-right corner of the window,"
          }, {
            "@type" : "AstTextComment",
            "text" : "   which clicking will set the boolean to false when clicked."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You may append multiple times to the same window during the same frame by calling Begin()/End() pairs multiple times."
          }, {
            "@type" : "AstTextComment",
            "text" : "   Some information such as 'flags' or 'p_open' will only be considered by the first call to Begin()."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Begin() return false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting"
          }, {
            "@type" : "AstTextComment",
            "text" : "   anything to the window. Always call a matching End() for each Begin() call, regardless of its return value!"
          }, {
            "@type" : "AstTextComment",
            "text" : "   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,"
          }, {
            "@type" : "AstTextComment",
            "text" : "    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function"
          }, {
            "@type" : "AstTextComment",
            "text" : "    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Note that the bottom of window stack always contains a window called \"Debug\"."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "End",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginChild",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "border",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Child Windows"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window. Child windows can embed their own child."
          }, {
            "@type" : "AstTextComment",
            "text" : " - For each independent axis of 'size': ==0.0f: use remaining host window size / >0.0f: fixed size / "
          }, {
            "@type" : "AstTextComment",
            "text" : "<"
          }, {
            "@type" : "AstTextComment",
            "text" : "0.0f: use remaining window size minus abs(size) / Each axis can use a different mode, e.g. ImVec2(0,400)."
          }, {
            "@type" : "AstTextComment",
            "text" : " - BeginChild() returns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window."
          }, {
            "@type" : "AstTextComment",
            "text" : "   Always call a matching EndChild() for each BeginChild() call, regardless of its return value."
          }, {
            "@type" : "AstTextComment",
            "text" : "   [Important: due to legacy reason, this is inconsistent with most other functions such as BeginMenu/EndMenu,"
          }, {
            "@type" : "AstTextComment",
            "text" : "    BeginPopup/EndPopup, etc. where the EndXXX call should only be called if the corresponding BeginXXX function"
          }, {
            "@type" : "AstTextComment",
            "text" : "    returned true. Begin and BeginChild are the only odd ones out. Will be fixed in a future update.]"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginChild",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "border",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndChild",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsWindowAppearing",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Windows Utilities"
          }, {
            "@type" : "AstTextComment",
            "text" : " - 'current window' = the window we are appending into while inside a Begin()/End() block. 'next window' = next window we will Begin() into."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsWindowCollapsed",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsWindowFocused",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiFocusedFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsWindowHovered",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiHoveredFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowDrawList",
      "resultType" : "ImDrawList *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowDpiScale",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowPos",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowSize",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowWidth",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowHeight",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowViewport",
      "resultType" : "ImGuiViewport *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "pivot",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Window manipulation"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Prefer using SetNextXXX functions (before Begin) rather that SetXXX functions (after Begin)."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowSize",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowSizeConstraints",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "custom_callback",
        "qualType" : "ImGuiSizeCallback",
        "desugaredQualType" : "void (*)(ImGuiSizeCallbackData *)",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "custom_callback_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowContentSize",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowCollapsed",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "collapsed",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowFocus",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowBgAlpha",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "alpha",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowViewport",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "viewport_id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowSize",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowCollapsed",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "collapsed",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowFocus",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowFontScale",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "scale",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowSize",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowCollapsed",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "collapsed",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetWindowFocus",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetContentRegionAvail",
      "resultType" : "ImVec2",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Content region"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Retrieve available space from a given point. GetContentRegionAvail() is frequently useful."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Those functions are bound to be redesigned (they are confusing, incomplete and the Min/Max return values are in local window coordinates which increases confusion)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetContentRegionMax",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowContentRegionMin",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowContentRegionMax",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetScrollX",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Windows Scrolling"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetScrollY",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollX",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "scroll_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollY",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "scroll_y",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetScrollMaxX",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetScrollMaxY",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollHereX",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center_x_ratio",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.5f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollHereY",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center_y_ratio",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.5f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollFromPosX",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "local_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "center_x_ratio",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.5f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetScrollFromPosY",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "local_y",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "center_y_ratio",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.5f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushFont",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font",
        "qualType" : "ImFont *",
        "desugaredQualType" : "ImFont *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Parameters stacks (shared)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopFont",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushStyleColor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiCol",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushStyleColor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiCol",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopStyleColor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "count",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushStyleVar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiStyleVar",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushStyleVar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiStyleVar",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopStyleVar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "count",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushAllowKeyboardFocus",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "allow_keyboard_focus",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopAllowKeyboardFocus",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushButtonRepeat",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "repeat",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopButtonRepeat",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushItemWidth",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "item_width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Parameters stacks (current window)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopItemWidth",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextItemWidth",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "item_width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcItemWidth",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushTextWrapPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_local_pos_x",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopTextWrapPos",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFont",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Style read access"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use the style editor (ShowStyleEditor() function) to interactively see what the colors are)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFontSize",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFontTexUvWhitePixel",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColorU32",
      "resultType" : "ImU32",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiCol",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "alpha_mul",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColorU32",
      "resultType" : "ImU32",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColorU32",
      "resultType" : "ImU32",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetStyleColorVec4",
      "resultType" : "const ImVec4 &",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiCol",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Separator",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Cursor / Layout"
          }, {
            "@type" : "AstTextComment",
            "text" : " - By \"cursor\" we mean the current output position."
          }, {
            "@type" : "AstTextComment",
            "text" : " - The typical widget behavior is to output themselves at the current cursor position, then move the cursor one line down."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can call SameLine() between widgets to undo the last carriage return and output at the right of the preceding widget."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Attention! We currently have inconsistencies between window-local and absolute positions we will aim to fix with future API:"
          }, {
            "@type" : "AstTextComment",
            "text" : "    Window-local coordinates:   SameLine(), GetCursorPos(), SetCursorPos(), GetCursorStartPos(), GetContentRegionMax(), GetWindowContentRegion*(), PushTextWrapPos()"
          }, {
            "@type" : "AstTextComment",
            "text" : "    Absolute coordinate:        GetCursorScreenPos(), SetCursorScreenPos(), all ImDrawList:: functions."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SameLine",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "offset_from_start_x",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "spacing",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "NewLine",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Spacing",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Dummy",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Indent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "indent_w",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Unindent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "indent_w",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginGroup",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndGroup",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCursorPos",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCursorPosX",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCursorPosY",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCursorPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "local_pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCursorPosX",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "local_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCursorPosY",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "local_y",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCursorStartPos",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCursorScreenPos",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCursorScreenPos",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AlignTextToFramePadding",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTextLineHeight",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTextLineHeightWithSpacing",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFrameHeight",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFrameHeightWithSpacing",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " ID stack/scopes"
          }, {
            "@type" : "AstTextComment",
            "text" : " Read the FAQ (docs/FAQ.md or http://dearimgui.org/faq) for more details about how ID are handled in dear imgui."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Those questions are answered and impacted by understanding of the ID stack system:"
          }, {
            "@type" : "AstTextComment",
            "text" : "   - \"Q: Why is my widget not reacting when I click on it?\""
          }, {
            "@type" : "AstTextComment",
            "text" : "   - \"Q: How can I have widgets with an empty label?\""
          }, {
            "@type" : "AstTextComment",
            "text" : "   - \"Q: How can I have multiple widgets with the same label?\""
          }, {
            "@type" : "AstTextComment",
            "text" : " - Short version: ID are hashes of the entire ID stack. If you are creating widgets in a loop you most likely"
          }, {
            "@type" : "AstTextComment",
            "text" : "   want to push a unique identifier (e.g. object pointer, loop index) to uniquely differentiate them."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can also use the \"Label##foobar\" syntax within widget label to distinguish them from each others."
          }, {
            "@type" : "AstTextComment",
            "text" : " - In this header file we use the \"label\"/\"name\" terminology to denote a string that will be displayed + used as an ID,"
          }, {
            "@type" : "AstTextComment",
            "text" : "   whereas \"str_id\" denote a string that is only used as an ID and not normally displayed."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "str_id_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "int_id",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopID",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetID",
      "resultType" : "ImGuiID",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetID",
      "resultType" : "ImGuiID",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "str_id_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetID",
      "resultType" : "ImGuiID",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextUnformatted",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Text"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Text",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextColored",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextColoredV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextDisabled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextDisabledV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextWrapped",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TextWrappedV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LabelText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LabelTextV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BulletText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BulletTextV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Button",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Main"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Most widgets return true when the value has been changed or when pressed/selected"
          }, {
            "@type" : "AstTextComment",
            "text" : " - You may also use one of the many IsItemXXX functions (e.g. IsItemActive, IsItemHovered, etc.) to query widget state."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SmallButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InvisibleButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiButtonFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ArrowButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "dir",
        "qualType" : "ImGuiDir",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Image",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "user_texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv0",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(1,1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "tint_col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &",
        "defaultValue" : "ImVec4(1,1,1,1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "border_col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &",
        "defaultValue" : "ImVec4(0,0,0,0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ImageButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "user_texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv0",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(1,1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "frame_padding",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "bg_col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &",
        "defaultValue" : "ImVec4(0,0,0,0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "tint_col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &",
        "defaultValue" : "ImVec4(1,1,1,1)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Checkbox",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CheckboxFlags",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags_value",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CheckboxFlags",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "unsigned int *",
        "desugaredQualType" : "unsigned int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags_value",
        "qualType" : "unsigned int",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "RadioButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "active",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "RadioButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_button",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ProgressBar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fraction",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_arg",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(-FLT_MIN, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overlay",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Bullet",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginCombo",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "preview_value",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiComboFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Combo Box"
          }, {
            "@type" : "AstTextComment",
            "text" : " - The BeginCombo()/EndCombo() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() items."
          }, {
            "@type" : "AstTextComment",
            "text" : " - The old Combo() api are helpers over BeginCombo()/EndCombo() which are kept available for convenience purpose. This is analogous to how ListBox are created."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndCombo",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Combo",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "current_item",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items",
        "qualType" : "const char *const *",
        "desugaredQualType" : "const char *const *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_max_height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Combo",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "current_item",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_separated_by_zeros",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_max_height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Combo",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "current_item",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_getter",
        "qualType" : "bool (*)(void *, int, const char **)",
        "desugaredQualType" : "bool (*)(void *, int, const char **)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_max_height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Drag Sliders"
          }, {
            "@type" : "AstTextComment",
            "text" : " - CTRL+Click on any drag box to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp."
          }, {
            "@type" : "AstTextComment",
            "text" : " - For all the Float2/Float3/Float4/Int2/Int3/Int4 versions of every functions, note that a 'float v[X]' function argument is the same as 'float* v',"
          }, {
            "@type" : "AstTextComment",
            "text" : "   the array syntax is just a way to document the number of elements that are expected to be accessible. You can pass address of your first element out of a contiguous set, e.g. "
          }, {
            "@type" : "AstTextComment",
            "text" : "&myvector"
          }, {
            "@type" : "AstTextComment",
            "text" : ".x"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Format string may also be set to NULL or use the default format (\"%f\" or \"%d\")."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Speed are per-pixel of mouse movement (v_speed=0.2f: mouse needs to move by 5 pixels to increase value by 1). For gamepad/keyboard navigation, minimum speed is Max(v_speed, minimum_step_at_given_precision)."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use v_min "
          }, {
            "@type" : "AstTextComment",
            "text" : "<"
          }, {
            "@type" : "AstTextComment",
            "text" : " v_max to clamp edits to given limits. Note that CTRL+Click manual input can override those limits if ImGuiSliderFlags_AlwaysClamp is not used."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use v_max = FLT_MAX / INT_MAX etc to avoid clamping to a maximum, same with v_min = -FLT_MAX / INT_MIN to avoid clamping to a minimum."
          }, {
            "@type" : "AstTextComment",
            "text" : " - We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Legacy: Pre-1.78 there are DragXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument."
          }, {
            "@type" : "AstTextComment",
            "text" : "   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloatRange2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_current_min",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_current_max",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format_max",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragInt",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragInt2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragInt3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragInt4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragIntRange2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_current_min",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_current_max",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format_max",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragScalarN",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "components",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Regular Sliders"
          }, {
            "@type" : "AstTextComment",
            "text" : " - CTRL+Click on any slider to turn them into an input box. Manually input values aren't clamped by default and can go off-bounds. Use ImGuiSliderFlags_AlwaysClamp to always clamp."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Adjust format string to decorate the value with a prefix, a suffix, or adapt the editing and display precision e.g. \"%.3f\" -> 1.234; \"%5.2f secs\" -> 01.23 secs; \"Biscuit: %.0f\" -> Biscuit: 1; etc."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Format string may also be set to NULL or use the default format (\"%f\" or \"%d\")."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Legacy: Pre-1.78 there are SliderXXX() function signatures that takes a final `float power=1.0f' argument instead of the `ImGuiSliderFlags flags=0' argument."
          }, {
            "@type" : "AstTextComment",
            "text" : "   If you get a warning converting a float to ImGuiSliderFlags, read https://github.com/ocornut/imgui/issues/3361"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderAngle",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_rad",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_degrees_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-360.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_degrees_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "+360.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.0f deg\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderInt",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderInt2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderInt3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderInt4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderScalarN",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "components",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "VSliderFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "VSliderInt",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%d\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "VSliderScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSliderFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputText",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf",
        "qualType" : "char *",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf_size",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "callback",
        "qualType" : "ImGuiInputTextCallback",
        "desugaredQualType" : "int (*)(ImGuiInputTextCallbackData *)",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "user_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Input with Keyboard"
          }, {
            "@type" : "AstTextComment",
            "text" : " - If you want to use InputText() with std::string or any custom dynamic string type, see misc/cpp/imgui_stdlib.h and comments in imgui_demo.cpp."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Most of the ImGuiInputTextFlags flags are only useful for InputText() and not for InputFloatX, InputIntX, InputDouble etc."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputTextMultiline",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf",
        "qualType" : "char *",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf_size",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "callback",
        "qualType" : "ImGuiInputTextCallback",
        "desugaredQualType" : "int (*)(ImGuiInputTextCallbackData *)",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "user_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputTextWithHint",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "hint",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf",
        "qualType" : "char *",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "buf_size",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "callback",
        "qualType" : "ImGuiInputTextCallback",
        "desugaredQualType" : "int (*)(ImGuiInputTextCallbackData *)",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "user_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step_fast",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputFloat2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputFloat3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputFloat4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.3f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputInt",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step_fast",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "100"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputInt2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputInt3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputInt4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputDouble",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "double *",
        "desugaredQualType" : "double *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step",
        "qualType" : "double",
        "desugaredQualType" : "double",
        "defaultValue" : "0.0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "step_fast",
        "qualType" : "double",
        "desugaredQualType" : "double",
        "defaultValue" : "0.0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"%.6f\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_step",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_step_fast",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InputScalarN",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "components",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_step",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_step_fast",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiInputTextFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorEdit3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Color Editor/Picker (tip: the ColorEdit* functions have a little color square that can be left-clicked to open a picker, and right-clicked to open an option menu.)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Note that in C++ a 'float v[X]' function argument is the _same_ as 'float* v', the array syntax is just a way to document the number of elements that are expected to be accessible."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can pass the address of a first float element out of a contiguous structure, e.g. "
          }, {
            "@type" : "AstTextComment",
            "text" : "&myvector"
          }, {
            "@type" : "AstTextComment",
            "text" : ".x"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorEdit4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorPicker3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorPicker4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "ref_col",
        "qualType" : "const float *",
        "desugaredQualType" : "const float *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "desc_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetColorEditOptions",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiColorEditFlags",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNode",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Trees"
          }, {
            "@type" : "AstTextComment",
            "text" : " - TreeNode functions return true when the node is open, in which case you need to also call TreePop() when you are finished displaying the tree node contents."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNode",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNode",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeV",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeV",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeEx",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeEx",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeEx",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeExV",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreeNodeExV",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreePush",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreePush",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr_id",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TreePop",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTreeNodeToLabelSpacing",
      "resultType" : "float"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CollapsingHeader",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CollapsingHeader",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_visible",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTreeNodeFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextItemOpen",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "is_open",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Selectable",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "selected",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSelectableFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Selectables"
          }, {
            "@type" : "AstTextComment",
            "text" : " - A selectable highlights when hovered, and can display another color when selected."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Neighbors selectable extend their highlight bounds in order to leave no gap between them. This is so a series of selected Selectable appear contiguous."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Selectable",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_selected",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiSelectableFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginListBox",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: List Boxes"
          }, {
            "@type" : "AstTextComment",
            "text" : " - This is essentially a thin wrapper to using BeginChild/EndChild with some stylistic changes."
          }, {
            "@type" : "AstTextComment",
            "text" : " - The BeginListBox()/EndListBox() api allows you to manage your contents and selection state however you want it, by creating e.g. Selectable() or any items."
          }, {
            "@type" : "AstTextComment",
            "text" : " - The simplified/old ListBox() api are helpers over BeginListBox()/EndListBox() which are kept available for convenience purpose. This is analoguous to how Combos are created."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Choose frame width:   size.x > 0.0f: custom  /  size.x "
          }, {
            "@type" : "AstTextComment",
            "text" : "<"
          }, {
            "@type" : "AstTextComment",
            "text" : " 0.0f or -FLT_MIN: right-align   /  size.x = 0.0f (default): use current ItemWidth"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Choose frame height:  size.y > 0.0f: custom  /  size.y "
          }, {
            "@type" : "AstTextComment",
            "text" : "<"
          }, {
            "@type" : "AstTextComment",
            "text" : " 0.0f or -FLT_MIN: bottom-align  /  size.y = 0.0f (default): arbitrary default height which can fit ~7 items"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndListBox",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ListBox",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "current_item",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items",
        "qualType" : "const char *const *",
        "desugaredQualType" : "const char *const *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ListBox",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "current_item",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_getter",
        "qualType" : "bool (*)(void *, int, const char **)",
        "desugaredQualType" : "bool (*)(void *, int, const char **)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PlotLines",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values",
        "qualType" : "const float *",
        "desugaredQualType" : "const float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_offset",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overlay_text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "graph_size",
        "qualType" : "ImVec2",
        "desugaredQualType" : "ImVec2",
        "defaultValue" : "= ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "stride",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "sizeof(float)"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Data Plotting"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Consider using ImPlot (https://github.com/epezent/implot) which is much better!"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PlotLines",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_getter",
        "qualType" : "float (*)(void *, int)",
        "desugaredQualType" : "float (*)(void *, int)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_offset",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overlay_text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "graph_size",
        "qualType" : "ImVec2",
        "desugaredQualType" : "ImVec2",
        "defaultValue" : "= ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PlotHistogram",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values",
        "qualType" : "const float *",
        "desugaredQualType" : "const float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_offset",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overlay_text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "graph_size",
        "qualType" : "ImVec2",
        "desugaredQualType" : "ImVec2",
        "defaultValue" : "= ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "stride",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "sizeof(float)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PlotHistogram",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_getter",
        "qualType" : "float (*)(void *, int)",
        "desugaredQualType" : "float (*)(void *, int)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "values_offset",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overlay_text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_min",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "scale_max",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "FLT_MAX"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "graph_size",
        "qualType" : "ImVec2",
        "desugaredQualType" : "ImVec2",
        "defaultValue" : "= ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Value",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "prefix",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "b",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Value() Helpers."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Those are merely shortcut to calling Text() with a format string. Output single value in \"name: value\" format (tip: freely declare more in your code to handle your types. you can add functions to the ImGui namespace)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Value",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "prefix",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Value",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "prefix",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "unsigned int",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Value",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "prefix",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "float_format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginMenuBar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Widgets: Menus"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use BeginMenuBar() on a window ImGuiWindowFlags_MenuBar to append to its menu bar."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use BeginMainMenuBar() to create a menu bar at the top of the screen and append to it."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use BeginMenu() to create a menu. You can call BeginMenu() multiple time with the same identifier to append more items to it."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Not that MenuItem() keyboardshortcuts are displayed as a convenience but _not processed_ by Dear ImGui at the moment."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndMenuBar",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginMainMenuBar",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndMainMenuBar",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginMenu",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "enabled",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndMenu",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "MenuItem",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "shortcut",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "selected",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "enabled",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "MenuItem",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "shortcut",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_selected",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "enabled",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginTooltip",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Tooltips"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Tooltip are windows following the mouse. They do not take focus away."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndTooltip",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetTooltip",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetTooltipV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopup",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Popups: begin/end functions"
          }, {
            "@type" : "AstTextComment",
            "text" : "  - BeginPopup(): query popup state, if open start appending into the window. Call EndPopup() afterwards. ImGuiWindowFlags are forwarded to the window."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - BeginPopupModal(): block every interactions behind the window, cannot be closed by user, add a dimming background, has a title bar."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopupModal",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "name",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndPopup",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "OpenPopup",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Popups: open/close functions"
          }, {
            "@type" : "AstTextComment",
            "text" : "  - OpenPopup(): set popup state to open. ImGuiPopupFlags are available for opening options."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - If not modal: they can be closed by clicking anywhere outside them, or by pressing ESCAPE."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - CloseCurrentPopup(): use inside the BeginPopup()/EndPopup() scope to close manually."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - CloseCurrentPopup() is called by default by Selectable()/MenuItem() when activated (FIXME: need some options)."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - Use ImGuiPopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's already one at the same level. This is equivalent to e.g. testing for !IsAnyPopupOpen() prior to OpenPopup()."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - Use IsWindowAppearing() after BeginPopup() to tell if a window just opened."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IMPORTANT: Notice that for OpenPopupOnItemClick() we exceptionally default flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "OpenPopup",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "OpenPopupOnItemClick",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CloseCurrentPopup",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopupContextItem",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Popups: open+begin combined functions helpers"
          }, {
            "@type" : "AstTextComment",
            "text" : "  - Helpers to do OpenPopup+BeginPopup where the Open action is triggered by e.g. hovering an item and right-clicking."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - They are convenient to easily create context menus, hence the name."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IMPORTANT: Notice that BeginPopupContextXXX takes ImGuiPopupFlags just like OpenPopup() and unlike BeginPopup(). For full consistency, we may add ImGuiWindowFlags to the BeginPopupContextXXX functions in the future."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IMPORTANT: Notice that we exceptionally default their flags to 1 (== ImGuiPopupFlags_MouseButtonRight) for backward compatibility with older API taking 'int mouse_button = 1' parameter, so if you add other flags remember to re-add the ImGuiPopupFlags_MouseButtonRight."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopupContextWindow",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopupContextVoid",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "popup_flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsPopupOpen",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiPopupFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Popups: query functions"
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IsPopupOpen(): return true if the popup is open at the current BeginPopup() level of the popup stack."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId: return true if any popup is open at the current BeginPopup() level of the popup stack."
          }, {
            "@type" : "AstTextComment",
            "text" : "  - IsPopupOpen() with ImGuiPopupFlags_AnyPopupId + ImGuiPopupFlags_AnyPopupLevel: return true if any popup is open."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginTable",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "column",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTableFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "outer_size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0.0f, 0.0f)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "inner_width",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Tables"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Full-featured replacement for old Columns API."
          }, {
            "@type" : "AstTextComment",
            "text" : " - See Demo->Tables for demo code. See top of imgui_tables.cpp for general commentary."
          }, {
            "@type" : "AstTextComment",
            "text" : " - See ImGuiTableFlags_ and ImGuiTableColumnFlags_ enums for a description of available flags."
          }, {
            "@type" : "AstTextComment",
            "text" : " The typical call flow is:"
          }, {
            "@type" : "AstTextComment",
            "text" : " - 1. Call BeginTable(), early out if returning false."
          }, {
            "@type" : "AstTextComment",
            "text" : " - 2. Optionally call TableSetupColumn() to submit column name/flags/defaults."
          }, {
            "@type" : "AstTextComment",
            "text" : " - 3. Optionally call TableSetupScrollFreeze() to request scroll freezing of columns/rows."
          }, {
            "@type" : "AstTextComment",
            "text" : " - 4. Optionally call TableHeadersRow() to submit a header row. Names are pulled from TableSetupColumn() data."
          }, {
            "@type" : "AstTextComment",
            "text" : " - 5. Populate contents:"
          }, {
            "@type" : "AstTextComment",
            "text" : "    - In most situations you can use TableNextRow() + TableSetColumnIndex(N) to start appending into a column."
          }, {
            "@type" : "AstTextComment",
            "text" : "    - If you are using tables as a sort of grid, where every columns is holding the same type of contents,"
          }, {
            "@type" : "AstTextComment",
            "text" : "      you may prefer using TableNextColumn() instead of TableNextRow() + TableSetColumnIndex()."
          }, {
            "@type" : "AstTextComment",
            "text" : "      TableNextColumn() will automatically wrap-around into the next row if needed."
          }, {
            "@type" : "AstTextComment",
            "text" : "    - IMPORTANT: Comparatively to the old Columns() API, we need to call TableNextColumn() for the first column!"
          }, {
            "@type" : "AstTextComment",
            "text" : "    - Summary of possible call flow:"
          }, {
            "@type" : "AstTextComment",
            "text" : "        --------------------------------------------------------------------------------------------------------"
          }, {
            "@type" : "AstTextComment",
            "text" : "        TableNextRow() -> TableSetColumnIndex(0) -> Text(\"Hello 0\") -> TableSetColumnIndex(1) -> Text(\"Hello 1\")  // OK"
          }, {
            "@type" : "AstTextComment",
            "text" : "        TableNextRow() -> TableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK"
          }, {
            "@type" : "AstTextComment",
            "text" : "                          TableNextColumn()      -> Text(\"Hello 0\") -> TableNextColumn()      -> Text(\"Hello 1\")  // OK: TableNextColumn() automatically gets to next row!"
          }, {
            "@type" : "AstTextComment",
            "text" : "        TableNextRow()                           -> Text(\"Hello 0\")                                               // Not OK! Missing TableSetColumnIndex() or TableNextColumn()! Text will not appear!"
          }, {
            "@type" : "AstTextComment",
            "text" : "        --------------------------------------------------------------------------------------------------------"
          }, {
            "@type" : "AstTextComment",
            "text" : " - 5. Call EndTable()"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndTable",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableNextRow",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "row_flags",
        "qualType" : "ImGuiTableRowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "min_row_height",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableNextColumn",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableSetColumnIndex",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_n",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableSetupColumn",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTableColumnFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "init_width_or_weight",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "user_id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Tables: Headers "
          }, {
            "@type" : "AstTextComment",
            "text" : "&"
          }, {
            "@type" : "AstTextComment",
            "text" : " Columns declaration"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use TableSetupColumn() to specify label, resizing policy, default width/weight, id, various other flags etc."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use TableHeadersRow() to create a header row and automatically submit a TableHeader() for each column."
          }, {
            "@type" : "AstTextComment",
            "text" : "   Headers are required to perform: reordering, sorting, and opening the context menu."
          }, {
            "@type" : "AstTextComment",
            "text" : "   The context menu can also be made available in columns body using ImGuiTableFlags_ContextMenuInBody."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You may manually submit headers using TableNextRow() + TableHeader() calls, but this is only useful in"
          }, {
            "@type" : "AstTextComment",
            "text" : "   some advanced use cases (e.g. adding custom widgets in header row)."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use TableSetupScrollFreeze() to lock columns/rows so they stay visible when scrolled."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableSetupScrollFreeze",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "cols",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rows",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableHeadersRow",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableHeader",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetSortSpecs",
      "resultType" : "ImGuiTableSortSpecs *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Tables: Sorting "
          }, {
            "@type" : "AstTextComment",
            "text" : "&"
          }, {
            "@type" : "AstTextComment",
            "text" : " Miscellaneous functions"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Sorting: call TableGetSortSpecs() to retrieve latest sort specs for the table. NULL when not sorting."
          }, {
            "@type" : "AstTextComment",
            "text" : "   When 'sort_specs->SpecsDirty == true' you should sort your data. It will be true when sorting specs have"
          }, {
            "@type" : "AstTextComment",
            "text" : "   changed since last call, or the first time. Make sure to set 'SpecsDirty = false' after sorting,"
          }, {
            "@type" : "AstTextComment",
            "text" : "   else you may wastefully sort your data every frame!"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Functions args 'int column_n' treat the default value of -1 as the same as passing the current column index."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetColumnCount",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetColumnIndex",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetRowIndex",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetColumnName",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_n",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableGetColumnFlags",
      "resultType" : "ImGuiTableColumnFlags",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_n",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableSetColumnEnabled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_n",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TableSetBgColor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "target",
        "qualType" : "ImGuiTableBgTarget",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "color",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "column_n",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Columns",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "count",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "border",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Legacy Columns API (prefer using Tables!)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can also use SameLine(pos_x) to mimic simplified columns."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "NextColumn",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColumnIndex",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColumnWidth",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_index",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetColumnWidth",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_index",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColumnOffset",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_index",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetColumnOffset",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "column_index",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "offset_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetColumnsCount",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginTabBar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTabBarFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Tab Bars, Tabs"
          }, {
            "@type" : "AstTextComment",
            "text" : " Note: Tabs are automatically created by the docking system. Use this to create tab bars/tabs yourself without docking being involved."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndTabBar",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginTabItem",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_open",
        "qualType" : "bool *",
        "desugaredQualType" : "bool *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTabItemFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndTabItem",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "TabItemButton",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiTabItemFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetTabItemClosed",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "tab_or_docked_window_label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DockSpace",
      "resultType" : "ImGuiID",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiDockNodeFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "window_class",
        "qualType" : "const ImGuiWindowClass *",
        "desugaredQualType" : "const ImGuiWindowClass *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Docking"
          }, {
            "@type" : "AstTextComment",
            "text" : " [BETA API] Enable with io.ConfigFlags |= ImGuiConfigFlags_DockingEnable."
          }, {
            "@type" : "AstTextComment",
            "text" : " Note: You can use most Docking facilities without calling any API. You DO NOT need to call DockSpace() to use Docking!"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Drag from window title bar or their tab to dock/undock. Hold SHIFT to disable docking/undocking."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Drag from window menu button (upper-left button) to undock an entire node (all windows)."
          }, {
            "@type" : "AstTextComment",
            "text" : " - When io.ConfigDockingWithShift == true, you instead need to hold SHIFT to _enable_ docking/undocking."
          }, {
            "@type" : "AstTextComment",
            "text" : " About dockspaces:"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use DockSpace() to create an explicit dock node _within_ an existing window. See Docking demo for details."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use DockSpaceOverViewport() to create an explicit dock node covering the screen or a specific viewport."
          }, {
            "@type" : "AstTextComment",
            "text" : "   This is often used with ImGuiDockNodeFlags_PassthruCentralNode."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Important: Dockspaces need to be submitted _before_ any window they can host. Submit it early in your frame!"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Important: Dockspaces need to be kept alive if hidden, otherwise windows docked into it will be undocked."
          }, {
            "@type" : "AstTextComment",
            "text" : "   e.g. if you have multiple tabs with a dockspace inside each tab: submit the non-visible dockspaces with ImGuiDockNodeFlags_KeepAliveOnly."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DockSpaceOverViewport",
      "resultType" : "ImGuiID",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "viewport",
        "qualType" : "const ImGuiViewport *",
        "desugaredQualType" : "const ImGuiViewport *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiDockNodeFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "window_class",
        "qualType" : "const ImGuiWindowClass *",
        "desugaredQualType" : "const ImGuiWindowClass *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowDockID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "dock_id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextWindowClass",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "window_class",
        "qualType" : "const ImGuiWindowClass *",
        "desugaredQualType" : "const ImGuiWindowClass *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowDockID",
      "resultType" : "ImGuiID"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsWindowDocked",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogToTTY",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "auto_open_depth",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Logging/Capture"
          }, {
            "@type" : "AstTextComment",
            "text" : " - All text output from the interface can be captured into tty/file/clipboard. By default, tree nodes are automatically opened during logging."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogToFile",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "auto_open_depth",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "filename",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogToClipboard",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "auto_open_depth",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogFinish",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogButtons",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LogTextV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginDragDropSource",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiDragDropFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Drag and Drop"
          }, {
            "@type" : "AstTextComment",
            "text" : " - On source items, call BeginDragDropSource(), if it returns true also call SetDragDropPayload() + EndDragDropSource()."
          }, {
            "@type" : "AstTextComment",
            "text" : " - On target candidates, call BeginDragDropTarget(), if it returns true also call AcceptDragDropPayload() + EndDragDropTarget()."
          }, {
            "@type" : "AstTextComment",
            "text" : " - If you stop calling BeginDragDropSource() the payload is preserved however it won't have a preview tooltip (we currently display a fallback \"...\" tooltip, see #1725)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - An item can be both drag source and drop target."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetDragDropPayload",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "type",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cond",
        "qualType" : "ImGuiCond",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndDragDropSource",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginDragDropTarget",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AcceptDragDropPayload",
      "resultType" : "const ImGuiPayload *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "type",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiDragDropFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndDragDropTarget",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetDragDropPayload",
      "resultType" : "const ImGuiPayload *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginDisabled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "disabled",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Disabling [BETA API]"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Disable all user interactions and dim items visuals (applying style.DisabledAlpha over current colors)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Those can be nested but it cannot be used to enable an already disabled section (a single BeginDisabled(true) in the stack is enough to keep everything disabled)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - BeginDisabled(false) essentially does nothing useful but is provided to facilitate use of boolean expressions. If you can avoid calling BeginDisabled(False)/EndDisabled() best to avoid it."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndDisabled",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushClipRect",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "clip_rect_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "clip_rect_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "intersect_with_current_clip_rect",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Clipping"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Mouse hovering is affected by ImGui::PushClipRect() calls, unlike direct calls to ImDrawList::PushClipRect() which are render only."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopClipRect",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetItemDefaultFocus",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Focus, Activation"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Prefer using \"SetItemDefaultFocus()\" over \"if (IsWindowAppearing()) SetScrollHereY()\" when applicable to signify \"this is the default item\""
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetKeyboardFocusHere",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "offset",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemHovered",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiHoveredFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Item/Widgets Utilities and Query Functions"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Most of the functions are referring to the previous Item that has been submitted."
          }, {
            "@type" : "AstTextComment",
            "text" : " - See Demo Window under \"Widgets->Querying Status\" for an interactive visualization of most of those functions."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemActive",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemFocused",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemClicked",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "mouse_button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemVisible",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemEdited",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemActivated",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemDeactivated",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemDeactivatedAfterEdit",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsItemToggledOpen",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsAnyItemHovered",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsAnyItemActive",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsAnyItemFocused",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetItemRectMin",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetItemRectMax",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetItemRectSize",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetItemAllowOverlap",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMainViewport",
      "resultType" : "ImGuiViewport *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Viewports"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows."
          }, {
            "@type" : "AstTextComment",
            "text" : " - In 'docking' branch with multi-viewport enabled, we extend this concept to have multiple active viewports."
          }, {
            "@type" : "AstTextComment",
            "text" : " - In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetBackgroundDrawList",
      "resultType" : "ImDrawList *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Background/Foreground Draw Lists"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetForegroundDrawList",
      "resultType" : "ImDrawList *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetBackgroundDrawList",
      "resultType" : "ImDrawList *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "viewport",
        "qualType" : "ImGuiViewport *",
        "desugaredQualType" : "ImGuiViewport *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetForegroundDrawList",
      "resultType" : "ImDrawList *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "viewport",
        "qualType" : "ImGuiViewport *",
        "desugaredQualType" : "ImGuiViewport *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsRectVisible",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Miscellaneous Utilities"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsRectVisible",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "rect_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rect_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTime",
      "resultType" : "double"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFrameCount",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetDrawListSharedData",
      "resultType" : "ImDrawListSharedData *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetStyleColorName",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImGuiCol",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetStateStorage",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "storage",
        "qualType" : "ImGuiStorage *",
        "desugaredQualType" : "ImGuiStorage *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetStateStorage",
      "resultType" : "ImGuiStorage *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginChildFrame",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImGuiWindowFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "EndChildFrame",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcTextSize",
      "resultType" : "ImVec2",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "hide_text_after_double_hash",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_width",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-1.0f"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Text Utilities"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorConvertU32ToFloat4",
      "resultType" : "ImVec4",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "in",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Color Utilities"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorConvertFloat4ToU32",
      "resultType" : "ImU32",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "in",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorConvertRGBtoHSV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "r",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "g",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "b",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_h",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_s",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_v",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ColorConvertHSVtoRGB",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "h",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "s",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_r",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_g",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_b",
        "qualType" : "float &",
        "desugaredQualType" : "float &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsKeyDown",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Inputs Utilities: Keyboard"
          }, {
            "@type" : "AstTextComment",
            "text" : " Without IMGUI_DISABLE_OBSOLETE_KEYIO: (legacy support)"
          }, {
            "@type" : "AstTextComment",
            "text" : "   - For 'ImGuiKey key' you can still use your legacy native/user indices according to how your backend/engine stored them in io.KeysDown[]."
          }, {
            "@type" : "AstTextComment",
            "text" : " With IMGUI_DISABLE_OBSOLETE_KEYIO: (this is the way forward)"
          }, {
            "@type" : "AstTextComment",
            "text" : "   - Any use of 'ImGuiKey' will assert when key "
          }, {
            "@type" : "AstTextComment",
            "text" : "<"
          }, {
            "@type" : "AstTextComment",
            "text" : " 512 will be passed, previously reserved as native/user keys indices"
          }, {
            "@type" : "AstTextComment",
            "text" : "   - GetKeyIndex() is pass-through and therefore deprecated (gone if IMGUI_DISABLE_OBSOLETE_KEYIO is defined)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsKeyPressed",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "repeat",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsKeyReleased",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetKeyPressedAmount",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "repeat_delay",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rate",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetKeyName",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextFrameWantCaptureKeyboard",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "want_capture_keyboard",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseDown",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Inputs Utilities: Mouse"
          }, {
            "@type" : "AstTextComment",
            "text" : " - To refer to a mouse button, you may use named enums in your code e.g. ImGuiMouseButton_Left, ImGuiMouseButton_Right."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can also use regular integer: it is forever guaranteed that 0=Left, 1=Right, 2=Middle."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Dragging operations are only reported after mouse has moved a certain distance away from the initial clicking position (see 'lock_threshold' and 'io.MouseDraggingThreshold')"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseClicked",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "repeat",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseReleased",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseDoubleClicked",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMouseClickedCount",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseHoveringRect",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "r_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "r_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "clip",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMousePosValid",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "mouse_pos",
        "qualType" : "const ImVec2 *",
        "desugaredQualType" : "const ImVec2 *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsAnyMouseDown",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMousePos",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMousePosOnOpeningCurrentPopup",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsMouseDragging",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "lock_threshold",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMouseDragDelta",
      "resultType" : "ImVec2",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "lock_threshold",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ResetMouseDragDelta",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMouseCursor",
      "resultType" : "ImGuiMouseCursor"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetMouseCursor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "cursor_type",
        "qualType" : "ImGuiMouseCursor",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetNextFrameWantCaptureMouse",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "want_capture_mouse",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetClipboardText",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Clipboard Utilities"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Also see the LogToClipboard() function to capture GUI into clipboard, or easily output text data to the clipboard."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetClipboardText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LoadIniSettingsFromDisk",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ini_filename",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Settings/.Ini Utilities"
          }, {
            "@type" : "AstTextComment",
            "text" : " - The disk functions are automatically called if io.IniFilename != NULL (default is \"imgui.ini\")."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Set io.IniFilename to NULL to load/save manually. Read io.WantSaveIniSettings description about handling .ini saving manually."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Important: default value \"imgui.ini\" is relative to current working dir! Most apps will want to lock this to an absolute path (e.g. same path as executables)."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "LoadIniSettingsFromMemory",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ini_data",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "ini_size",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SaveIniSettingsToDisk",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ini_filename",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SaveIniSettingsToMemory",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "out_ini_size",
        "qualType" : "size_t *",
        "desugaredQualType" : "size_t *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DebugTextEncoding",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Debug Utilities"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DebugCheckVersionAndDataLayout",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "version_str",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_io",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_style",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_vec2",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_vec4",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_drawvert",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "sz_drawidx",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetAllocatorFunctions",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "alloc_func",
        "qualType" : "ImGuiMemAllocFunc",
        "desugaredQualType" : "void *(*)(size_t, void *)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "free_func",
        "qualType" : "ImGuiMemFreeFunc",
        "desugaredQualType" : "void (*)(void *, void *)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "user_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Memory Allocators"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Those functions are not reliant on the current context."
          }, {
            "@type" : "AstTextComment",
            "text" : " - DLL users: heaps and globals are not shared across DLL boundaries! You will need to call SetCurrentContext() + SetAllocatorFunctions()"
          }, {
            "@type" : "AstTextComment",
            "text" : "   for each static/DLL boundary you are calling from. Read \"Context and Memory Allocators\" section of imgui.cpp for more details."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetAllocatorFunctions",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_alloc_func",
        "qualType" : "ImGuiMemAllocFunc *",
        "desugaredQualType" : "ImGuiMemAllocFunc *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_free_func",
        "qualType" : "ImGuiMemFreeFunc *",
        "desugaredQualType" : "ImGuiMemFreeFunc *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_user_data",
        "qualType" : "void **",
        "desugaredQualType" : "void **"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "MemAlloc",
      "resultType" : "void *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "MemFree",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ptr",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetPlatformIO",
      "resultType" : "ImGuiPlatformIO &",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " (Optional) Platform/OS interface for multi-viewport support"
          }, {
            "@type" : "AstTextComment",
            "text" : " Read comments around the ImGuiPlatformIO structure for more details."
          }, {
            "@type" : "AstTextComment",
            "text" : " Note: You may use GetWindowViewport() to get the current viewport of the current window."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "UpdatePlatformWindows",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "RenderPlatformWindowsDefault",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "platform_render_arg",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "renderer_render_arg",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DestroyPlatformWindows",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "FindViewportByID",
      "resultType" : "ImGuiViewport *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "FindViewportByPlatformHandle",
      "resultType" : "ImGuiViewport *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "platform_handle",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      } ]
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiWindowFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::Begin()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_None",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoTitleBar",
      "docComment" : "Disable title-bar",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoResize",
      "docComment" : "Disable user resizing with the lower-right grip",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoMove",
      "docComment" : "Disable user moving the window",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoScrollbar",
      "docComment" : "Disable scrollbars (window can still scroll with mouse or programmatically)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoScrollWithMouse",
      "docComment" : "Disable user vertically scrolling with mouse wheel. On child window, mouse wheel will be forwarded to the parent unless NoScrollbar is also set.",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoCollapse",
      "docComment" : "Disable user collapsing window by double-clicking on it. Also referred to as Window Menu Button (e.g. within a docking node).",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_AlwaysAutoResize",
      "docComment" : "Resize every window to its content every frame",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoBackground",
      "docComment" : "Disable drawing background color (WindowBg, etc.) and outside border. Similar as using SetNextWindowBgAlpha(0.0f).",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoSavedSettings",
      "docComment" : "Never load/save settings in .ini file",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoMouseInputs",
      "docComment" : "Disable catching mouse, hovering test with pass through.",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_MenuBar",
      "docComment" : "Has a menu-bar",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_HorizontalScrollbar",
      "docComment" : "Allow horizontal scrollbar to appear (off by default). You may use SetNextWindowContentSize(ImVec2(width,0.0f)); prior to calling Begin() to specify width. Read code in imgui_demo in the \"Horizontal Scrolling\" section.",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 12,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoFocusOnAppearing",
      "docComment" : "Disable taking focus when transitioning from hidden to visible state",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 13,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoBringToFrontOnFocus",
      "docComment" : "Disable bringing window to front when taking focus (e.g. clicking on it or programmatically giving it focus)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 14,
      "value" : "1 << 13",
      "evaluatedValue" : 8192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_AlwaysVerticalScrollbar",
      "docComment" : "Always show vertical scrollbar (even if ContentSize.y < Size.y)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 15,
      "value" : "1 << 14",
      "evaluatedValue" : 16384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_AlwaysHorizontalScrollbar",
      "docComment" : "Always show horizontal scrollbar (even if ContentSize.x < Size.x)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 16,
      "value" : "1<< 15",
      "evaluatedValue" : 32768
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_AlwaysUseWindowPadding",
      "docComment" : "Ensure child windows without border uses style.WindowPadding (ignored by default for non-bordered child windows, because more convenient)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 17,
      "value" : "1 << 16",
      "evaluatedValue" : 65536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoNavInputs",
      "docComment" : "No gamepad/keyboard navigation within the window",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 18,
      "value" : "1 << 18",
      "evaluatedValue" : 262144
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoNavFocus",
      "docComment" : "No focusing toward this window with gamepad/keyboard navigation (e.g. skipped by CTRL+TAB)",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 19,
      "value" : "1 << 19",
      "evaluatedValue" : 524288
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_UnsavedDocument",
      "docComment" : "Display a dot next to the title. When used in a tab/docking context, tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 20,
      "value" : "1 << 20",
      "evaluatedValue" : 1048576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoDocking",
      "docComment" : "Disable docking of this window",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 21,
      "value" : "1 << 21",
      "evaluatedValue" : 2097152
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoNav",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 22,
      "value" : "ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
      "evaluatedValue" : 786432
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoDecoration",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 23,
      "value" : "ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoCollapse",
      "evaluatedValue" : 43
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NoInputs",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 24,
      "value" : "ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus",
      "evaluatedValue" : 786944
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_NavFlattened",
      "docComment" : "[BETA] On child window: allow gamepad/keyboard navigation to cross over parent border to this child or between sibling child windows.",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 25,
      "value" : "1 << 23",
      "evaluatedValue" : 8388608
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_ChildWindow",
      "docComment" : "Don't use! For internal use by BeginChild()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 26,
      "value" : "1 << 24",
      "evaluatedValue" : 16777216
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_Tooltip",
      "docComment" : "Don't use! For internal use by BeginTooltip()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 27,
      "value" : "1 << 25",
      "evaluatedValue" : 33554432
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_Popup",
      "docComment" : "Don't use! For internal use by BeginPopup()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 28,
      "value" : "1 << 26",
      "evaluatedValue" : 67108864
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_Modal",
      "docComment" : "Don't use! For internal use by BeginPopupModal()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 29,
      "value" : "1 << 27",
      "evaluatedValue" : 134217728
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_ChildMenu",
      "docComment" : "Don't use! For internal use by BeginMenu()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 30,
      "value" : "1 << 28",
      "evaluatedValue" : 268435456
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiWindowFlags_DockNodeHost",
      "docComment" : "Don't use! For internal use by Begin()/NewFrame()",
      "qualType" : "ImGuiWindowFlags_",
      "order" : 31,
      "value" : "1 << 29",
      "evaluatedValue" : 536870912
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiInputTextFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::InputText()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_None",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CharsDecimal",
      "docComment" : "Allow 0123456789.+-*/",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CharsHexadecimal",
      "docComment" : "Allow 0123456789ABCDEFabcdef",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CharsUppercase",
      "docComment" : "Turn a..z into A..Z",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CharsNoBlank",
      "docComment" : "Filter out spaces, tabs",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_AutoSelectAll",
      "docComment" : "Select entire text when first taking mouse focus",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_EnterReturnsTrue",
      "docComment" : "Return 'true' when Enter is pressed (as opposed to every time the value was modified). Consider looking at the IsItemDeactivatedAfterEdit() function.",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackCompletion",
      "docComment" : "Callback on pressing TAB (for completion handling)",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackHistory",
      "docComment" : "Callback on pressing Up/Down arrows (for history handling)",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackAlways",
      "docComment" : "Callback on each iteration. User code may query cursor position, modify text buffer.",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackCharFilter",
      "docComment" : "Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard.",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_AllowTabInput",
      "docComment" : "Pressing TAB input a ' ' character into the text field",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CtrlEnterForNewLine",
      "docComment" : "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter (default is opposite: unfocus with Ctrl+Enter, add line with Enter).",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 12,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_NoHorizontalScroll",
      "docComment" : "Disable following the cursor horizontally",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 13,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_AlwaysOverwrite",
      "docComment" : "Overwrite mode",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 14,
      "value" : "1 << 13",
      "evaluatedValue" : 8192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_ReadOnly",
      "docComment" : "Read-only mode",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 15,
      "value" : "1 << 14",
      "evaluatedValue" : 16384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_Password",
      "docComment" : "Password mode, display all characters as '*'",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 16,
      "value" : "1 << 15",
      "evaluatedValue" : 32768
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_NoUndoRedo",
      "docComment" : "Disable undo/redo. Note that input text owns the text data while active, if you want to provide your own undo/redo stack you need e.g. to call ClearActiveID().",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 17,
      "value" : "1 << 16",
      "evaluatedValue" : 65536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CharsScientific",
      "docComment" : "Allow 0123456789.+-*/eE (Scientific notation input)",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 18,
      "value" : "1 << 17",
      "evaluatedValue" : 131072
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackResize",
      "docComment" : "Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow. Notify when the string wants to be resized (for string types which hold a cache of their Size). You will be provided a new BufSize in the callback and NEED to honor it. (see misc/cpp/imgui_stdlib.h for an example of using this)",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 19,
      "value" : "1 << 18",
      "evaluatedValue" : 262144
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_CallbackEdit",
      "docComment" : "Callback on any edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 20,
      "value" : "1 << 19",
      "evaluatedValue" : 524288
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiInputTextFlags_AlwaysInsertMode",
      "docComment" : "[renamed in 1.82] name was not matching behavior",
      "qualType" : "ImGuiInputTextFlags_",
      "order" : 21,
      "value" : "ImGuiInputTextFlags_AlwaysOverwrite",
      "evaluatedValue" : 8192
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTreeNodeFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::TreeNodeEx(), ImGui::CollapsingHeader*()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_None",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_Selected",
      "docComment" : "Draw as selected",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_Framed",
      "docComment" : "Draw frame with background (e.g. for CollapsingHeader)",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_AllowItemOverlap",
      "docComment" : "Hit testing to allow subsequent widgets to overlap this one",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_NoTreePushOnOpen",
      "docComment" : "Don't do a TreePush() when open (e.g. for CollapsingHeader) = no extra indent nor pushing on ID stack",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_NoAutoOpenOnLog",
      "docComment" : "Don't automatically and temporarily open node when Logging is active (by default logging will automatically open tree nodes)",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_DefaultOpen",
      "docComment" : "Default node to be open",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_OpenOnDoubleClick",
      "docComment" : "Need double-click to open node",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_OpenOnArrow",
      "docComment" : "Only open when clicking on the arrow part. If ImGuiTreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or double-click all box to open.",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_Leaf",
      "docComment" : "No collapsing, no arrow (use as a convenience for leaf nodes).",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_Bullet",
      "docComment" : "Display a bullet instead of arrow",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_FramePadding",
      "docComment" : "Use FramePadding (even for an unframed text node) to vertically align text baseline to regular widget height. Equivalent to calling AlignTextToFramePadding().",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_SpanAvailWidth",
      "docComment" : "Extend hit box to the right-most edge, even if not framed. This is not the default in order to allow adding other items on the same line. In the future we may refactor the hit system to be front-to-back, allowing natural overlaps and then this can become the default.",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 12,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_SpanFullWidth",
      "docComment" : "Extend hit box to the left-most and right-most edges (bypass the indented area).",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 13,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_NavLeftJumpsBackHere",
      "docComment" : "(WIP) Nav: left direction may move to this TreeNode() from any of its child (items submitted between TreeNode and TreePop)",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 14,
      "value" : "1 << 13",
      "evaluatedValue" : 8192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTreeNodeFlags_CollapsingHeader",
      "docComment" : "ImGuiTreeNodeFlags_NoScrollOnOpen     = 1 < < 14,  // FIXME: TODO: Disable automatic scroll on TreePop() if node got just open and contents is not visible",
      "qualType" : "ImGuiTreeNodeFlags_",
      "order" : 15,
      "value" : "ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_NoAutoOpenOnLog",
      "evaluatedValue" : 26
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiPopupFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for OpenPopup*(), BeginPopupContext*(), IsPopupOpen() functions."
        }, {
          "@type" : "AstTextComment",
          "text" : " - To be backward compatible with older API which took an 'int mouse_button = 1' argument, we need to treat"
        }, {
          "@type" : "AstTextComment",
          "text" : "   small flags values as a mouse button index, so we encode the mouse button in the first few bits of the flags."
        }, {
          "@type" : "AstTextComment",
          "text" : "   It is therefore guaranteed to be legal to pass a mouse button index in ImGuiPopupFlags."
        }, {
          "@type" : "AstTextComment",
          "text" : " - For the same reason, we exceptionally default the ImGuiPopupFlags argument of BeginPopupContextXXX functions to 1 instead of 0."
        }, {
          "@type" : "AstTextComment",
          "text" : "   IMPORTANT: because the default parameter is 1 (==ImGuiPopupFlags_MouseButtonRight), if you rely on the default parameter"
        }, {
          "@type" : "AstTextComment",
          "text" : "   and want to another another flag, you need to pass in the ImGuiPopupFlags_MouseButtonRight flag."
        }, {
          "@type" : "AstTextComment",
          "text" : " - Multiple buttons currently cannot be combined/or-ed in those functions (we could allow it later)."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_None",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_MouseButtonLeft",
      "docComment" : "For BeginPopupContext*(): open on Left Mouse release. Guaranteed to always be == 0 (same as ImGuiMouseButton_Left)",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 1,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_MouseButtonRight",
      "docComment" : "For BeginPopupContext*(): open on Right Mouse release. Guaranteed to always be == 1 (same as ImGuiMouseButton_Right)",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 2,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_MouseButtonMiddle",
      "docComment" : "For BeginPopupContext*(): open on Middle Mouse release. Guaranteed to always be == 2 (same as ImGuiMouseButton_Middle)",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 3,
      "value" : "2",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_MouseButtonMask_",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 4,
      "value" : "0x1F",
      "evaluatedValue" : 31
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_MouseButtonDefault_",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 5,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_NoOpenOverExistingPopup",
      "docComment" : "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup at the same level of the popup stack",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_NoOpenOverItems",
      "docComment" : "For BeginPopupContextWindow(): don't return true when hovering items, only when hovering empty space",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_AnyPopupId",
      "docComment" : "For IsPopupOpen(): ignore the ImGuiID parameter and test for any popup.",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_AnyPopupLevel",
      "docComment" : "For IsPopupOpen(): search/test at any level of the popup stack (default test in the current level)",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiPopupFlags_AnyPopup",
      "qualType" : "ImGuiPopupFlags_",
      "order" : 10,
      "value" : "ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPopupLevel",
      "evaluatedValue" : 384
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiSelectableFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::Selectable()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_None",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_DontClosePopups",
      "docComment" : "Clicking this don't close parent popup window",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_SpanAllColumns",
      "docComment" : "Selectable frame can span all columns (text will still fit in current column)",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_AllowDoubleClick",
      "docComment" : "Generate press events on double clicks too",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_Disabled",
      "docComment" : "Cannot be selected, display grayed out text",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSelectableFlags_AllowItemOverlap",
      "docComment" : "(WIP) Hit testing to allow subsequent widgets to overlap this one",
      "qualType" : "ImGuiSelectableFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiComboFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::BeginCombo()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_None",
      "qualType" : "ImGuiComboFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_PopupAlignLeft",
      "docComment" : "Align the popup toward the left by default",
      "qualType" : "ImGuiComboFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_HeightSmall",
      "docComment" : "Max ~4 items visible. Tip: If you want your combo popup to be a specific size you can use SetNextWindowSizeConstraints() prior to calling BeginCombo()",
      "qualType" : "ImGuiComboFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_HeightRegular",
      "docComment" : "Max ~8 items visible (default)",
      "qualType" : "ImGuiComboFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_HeightLarge",
      "docComment" : "Max ~20 items visible",
      "qualType" : "ImGuiComboFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_HeightLargest",
      "docComment" : "As many fitting items as possible",
      "qualType" : "ImGuiComboFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_NoArrowButton",
      "docComment" : "Display on the preview box without the square arrow button",
      "qualType" : "ImGuiComboFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_NoPreview",
      "docComment" : "Display only a square arrow button",
      "qualType" : "ImGuiComboFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiComboFlags_HeightMask_",
      "qualType" : "ImGuiComboFlags_",
      "order" : 8,
      "value" : "ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest",
      "evaluatedValue" : 30
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTabBarFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::BeginTabBar()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_None",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_Reorderable",
      "docComment" : "Allow manually dragging tabs to re-order them + New tabs are appended at the end of list",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_AutoSelectNewTabs",
      "docComment" : "Automatically select new tabs when they appear",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_TabListPopupButton",
      "docComment" : "Disable buttons to open the tab list popup",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_NoCloseWithMiddleMouseButton",
      "docComment" : "Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() & & IsMouseClicked(2)) *p_open = false.",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_NoTabListScrollingButtons",
      "docComment" : "Disable scrolling buttons (apply when fitting policy is ImGuiTabBarFlags_FittingPolicyScroll)",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_NoTooltip",
      "docComment" : "Disable tooltips when hovering a tab",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_FittingPolicyResizeDown",
      "docComment" : "Resize tabs when they don't fit",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_FittingPolicyScroll",
      "docComment" : "Add scroll buttons when tabs don't fit",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_FittingPolicyMask_",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 9,
      "value" : "ImGuiTabBarFlags_FittingPolicyResizeDown | ImGuiTabBarFlags_FittingPolicyScroll",
      "evaluatedValue" : 192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabBarFlags_FittingPolicyDefault_",
      "qualType" : "ImGuiTabBarFlags_",
      "order" : 10,
      "value" : "ImGuiTabBarFlags_FittingPolicyResizeDown",
      "evaluatedValue" : 64
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTabItemFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::BeginTabItem()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_None",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_UnsavedDocument",
      "docComment" : "Display a dot next to the title + tab is selected when clicking the X + closure is not assumed (will wait for user to stop submitting the tab). Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_SetSelected",
      "docComment" : "Trigger flag to programmatically make the tab selected when calling BeginTabItem()",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_NoCloseWithMiddleMouseButton",
      "docComment" : "Disable behavior of closing tabs (that are submitted with p_open != NULL) with middle mouse button. You can still repro this behavior on user's side with if (IsItemHovered() & & IsMouseClicked(2)) *p_open = false.",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_NoPushId",
      "docComment" : "Don't call PushID(tab->ID)/PopID() on BeginTabItem()/EndTabItem()",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_NoTooltip",
      "docComment" : "Disable tooltip for the given tab",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_NoReorder",
      "docComment" : "Disable reordering this tab or having another tab cross over this tab",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_Leading",
      "docComment" : "Enforce the tab position to the left of the tab bar (after the tab list popup button)",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTabItemFlags_Trailing",
      "docComment" : "Enforce the tab position to the right of the tab bar (before the scrolling buttons)",
      "qualType" : "ImGuiTabItemFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTableFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::BeginTable()"
        }, {
          "@type" : "AstTextComment",
          "text" : " - Important! Sizing policies have complex and subtle side effects, much more so than you would expect."
        }, {
          "@type" : "AstTextComment",
          "text" : "   Read comments/demos carefully + experiment with live demos to get acquainted with them."
        }, {
          "@type" : "AstTextComment",
          "text" : " - The DEFAULT sizing policies are:"
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Default to ImGuiTableFlags_SizingFixedFit    if ScrollX is on, or if host window has ImGuiWindowFlags_AlwaysAutoResize."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Default to ImGuiTableFlags_SizingStretchSame if ScrollX is off."
        }, {
          "@type" : "AstTextComment",
          "text" : " - When ScrollX is off:"
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Table defaults to ImGuiTableFlags_SizingStretchSame -> all Columns defaults to ImGuiTableColumnFlags_WidthStretch with same weight."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Columns sizing policy allowed: Stretch (default), Fixed/Auto."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Fixed Columns (if any) will generally obtain their requested width (unless the table cannot fit them all)."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Stretch Columns will share the remaining width according to their respective weight."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Mixed Fixed/Stretch columns is possible but has various side-effects on resizing behaviors."
        }, {
          "@type" : "AstTextComment",
          "text" : "      The typical use of mixing sizing policies is: any number of LEADING Fixed columns, followed by one or two TRAILING Stretch columns."
        }, {
          "@type" : "AstTextComment",
          "text" : "      (this is because the visible order of columns have subtle but necessary effects on how they react to manual resizing)."
        }, {
          "@type" : "AstTextComment",
          "text" : " - When ScrollX is on:"
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Table defaults to ImGuiTableFlags_SizingFixedFit -> all Columns defaults to ImGuiTableColumnFlags_WidthFixed"
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Columns sizing policy allowed: Fixed/Auto mostly."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Fixed Columns can be enlarged as needed. Table will show an horizontal scrollbar if needed."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - When using auto-resizing (non-resizable) fixed columns, querying the content width to use item right-alignment e.g. SetNextItemWidth(-FLT_MIN) doesn't make sense, would create a feedback loop."
        }, {
          "@type" : "AstTextComment",
          "text" : "    - Using Stretch columns OFTEN DOES NOT MAKE SENSE if ScrollX is on, UNLESS you have specified a value for 'inner_width' in BeginTable()."
        }, {
          "@type" : "AstTextComment",
          "text" : "      If you specify a value for 'inner_width' then effectively the scrolling space is known and Stretch or mixed Fixed/Stretch columns become meaningful again."
        }, {
          "@type" : "AstTextComment",
          "text" : " - Read on documentation at the top of imgui_tables.cpp for details."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_None",
      "docComment" : "Features",
      "qualType" : "ImGuiTableFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_Resizable",
      "docComment" : "Enable resizing columns.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_Reorderable",
      "docComment" : "Enable reordering columns in header row (need calling TableSetupColumn() + TableHeadersRow() to display headers)",
      "qualType" : "ImGuiTableFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_Hideable",
      "docComment" : "Enable hiding/disabling columns in context menu.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_Sortable",
      "docComment" : "Enable sorting. Call TableGetSortSpecs() to obtain sort specs. Also see ImGuiTableFlags_SortMulti and ImGuiTableFlags_SortTristate.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoSavedSettings",
      "docComment" : "Disable persisting columns order, width and sort settings in the .ini file.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_ContextMenuInBody",
      "docComment" : "Right-click on columns body/contents will display table context menu. By default it is available in TableHeadersRow().",
      "qualType" : "ImGuiTableFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_RowBg",
      "docComment" : "Set each RowBg color with ImGuiCol_TableRowBg or ImGuiCol_TableRowBgAlt (equivalent of calling TableSetBgColor with ImGuiTableBgFlags_RowBg0 on each row manually)",
      "qualType" : "ImGuiTableFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersInnerH",
      "docComment" : "Draw horizontal borders between rows.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersOuterH",
      "docComment" : "Draw horizontal borders at the top and bottom.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersInnerV",
      "docComment" : "Draw vertical borders between columns.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersOuterV",
      "docComment" : "Draw vertical borders on the left and right sides.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersH",
      "docComment" : "Draw horizontal borders.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 12,
      "value" : "ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_BordersOuterH",
      "evaluatedValue" : 384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersV",
      "docComment" : "Draw vertical borders.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 13,
      "value" : "ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersOuterV",
      "evaluatedValue" : 1536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersInner",
      "docComment" : "Draw inner borders.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 14,
      "value" : "ImGuiTableFlags_BordersInnerV | ImGuiTableFlags_BordersInnerH",
      "evaluatedValue" : 640
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_BordersOuter",
      "docComment" : "Draw outer borders.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 15,
      "value" : "ImGuiTableFlags_BordersOuterV | ImGuiTableFlags_BordersOuterH",
      "evaluatedValue" : 1280
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_Borders",
      "docComment" : "Draw all borders.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 16,
      "value" : "ImGuiTableFlags_BordersInner | ImGuiTableFlags_BordersOuter",
      "evaluatedValue" : 1920
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoBordersInBody",
      "docComment" : "[ALPHA] Disable vertical borders in columns Body (borders will always appears in Headers). -> May move to style",
      "qualType" : "ImGuiTableFlags_",
      "order" : 17,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoBordersInBodyUntilResize",
      "docComment" : "[ALPHA] Disable vertical borders in columns Body until hovered for resize (borders will always appears in Headers). -> May move to style",
      "qualType" : "ImGuiTableFlags_",
      "order" : 18,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SizingFixedFit",
      "docComment" : "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching contents width.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 19,
      "value" : "1 << 13",
      "evaluatedValue" : 8192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SizingFixedSame",
      "docComment" : "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable), matching the maximum contents width of all columns. Implicitly enable ImGuiTableFlags_NoKeepColumnsVisible.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 20,
      "value" : "2 << 13",
      "evaluatedValue" : 16384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SizingStretchProp",
      "docComment" : "Columns default to _WidthStretch with default weights proportional to each columns contents widths.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 21,
      "value" : "3 << 13",
      "evaluatedValue" : 24576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SizingStretchSame",
      "docComment" : "Columns default to _WidthStretch with default weights all equal, unless overridden by TableSetupColumn().",
      "qualType" : "ImGuiTableFlags_",
      "order" : 22,
      "value" : "4 << 13",
      "evaluatedValue" : 32768
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoHostExtendX",
      "docComment" : "Make outer width auto-fit to columns, overriding outer_size.x value. Only available when ScrollX/ScrollY are disabled and Stretch columns are not used.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 23,
      "value" : "1 << 16",
      "evaluatedValue" : 65536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoHostExtendY",
      "docComment" : "Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit). Only available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 24,
      "value" : "1 << 17",
      "evaluatedValue" : 131072
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoKeepColumnsVisible",
      "docComment" : "Disable keeping column always minimally visible when ScrollX is off and table gets too small. Not recommended if columns are resizable.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 25,
      "value" : "1 << 18",
      "evaluatedValue" : 262144
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_PreciseWidths",
      "docComment" : "Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 26,
      "value" : "1 << 19",
      "evaluatedValue" : 524288
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoClip",
      "docComment" : "Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with TableSetupScrollFreeze().",
      "qualType" : "ImGuiTableFlags_",
      "order" : 27,
      "value" : "1 << 20",
      "evaluatedValue" : 1048576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_PadOuterX",
      "docComment" : "Default if BordersOuterV is on. Enable outer-most padding. Generally desirable if you have headers.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 28,
      "value" : "1 << 21",
      "evaluatedValue" : 2097152
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoPadOuterX",
      "docComment" : "Default if BordersOuterV is off. Disable outer-most padding.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 29,
      "value" : "1 << 22",
      "evaluatedValue" : 4194304
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_NoPadInnerX",
      "docComment" : "Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off).",
      "qualType" : "ImGuiTableFlags_",
      "order" : 30,
      "value" : "1 << 23",
      "evaluatedValue" : 8388608
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_ScrollX",
      "docComment" : "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size. Changes default sizing policy. Because this create a child window, ScrollY is currently generally recommended when using ScrollX.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 31,
      "value" : "1 << 24",
      "evaluatedValue" : 16777216
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_ScrollY",
      "docComment" : "Enable vertical scrolling. Require 'outer_size' parameter of BeginTable() to specify the container size.",
      "qualType" : "ImGuiTableFlags_",
      "order" : 32,
      "value" : "1 << 25",
      "evaluatedValue" : 33554432
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SortMulti",
      "docComment" : "Hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).",
      "qualType" : "ImGuiTableFlags_",
      "order" : 33,
      "value" : "1 << 26",
      "evaluatedValue" : 67108864
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SortTristate",
      "docComment" : "Allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).",
      "qualType" : "ImGuiTableFlags_",
      "order" : 34,
      "value" : "1 << 27",
      "evaluatedValue" : 134217728
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableFlags_SizingMask_",
      "docComment" : "[Internal] Combinations and masks",
      "qualType" : "ImGuiTableFlags_",
      "order" : 35,
      "value" : "ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_SizingFixedSame | ImGuiTableFlags_SizingStretchProp | ImGuiTableFlags_SizingStretchSame",
      "evaluatedValue" : 57344
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTableColumnFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::TableSetupColumn()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_None",
      "docComment" : "Input configuration flags",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_Disabled",
      "docComment" : "Overriding/master disable flag: hide column, won't show in context menu (unlike calling TableSetColumnEnabled() which manipulates the user accessible state)",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_DefaultHide",
      "docComment" : "Default as a hidden/disabled column.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_DefaultSort",
      "docComment" : "Default as a sorting column.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_WidthStretch",
      "docComment" : "Column will stretch. Preferable with horizontal scrolling disabled (default if table sizing policy is _SizingStretchSame or _SizingStretchProp).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_WidthFixed",
      "docComment" : "Column will not stretch. Preferable with horizontal scrolling enabled (default if table sizing policy is _SizingFixedFit and table is resizable).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoResize",
      "docComment" : "Disable manual resizing.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoReorder",
      "docComment" : "Disable manual reordering this column, this will also prevent other columns from crossing over this column.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoHide",
      "docComment" : "Disable ability to hide/disable this column.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoClip",
      "docComment" : "Disable clipping for this column (all NoClip columns will render in a same draw command).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoSort",
      "docComment" : "Disable ability to sort on this field (even if ImGuiTableFlags_Sortable is set on the table).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoSortAscending",
      "docComment" : "Disable ability to sort in the ascending direction.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoSortDescending",
      "docComment" : "Disable ability to sort in the descending direction.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 12,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoHeaderLabel",
      "docComment" : "TableHeadersRow() will not submit label for this column. Convenient for some small columns. Name will still appear in context menu.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 13,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoHeaderWidth",
      "docComment" : "Disable header text width contribution to automatic column width.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 14,
      "value" : "1 << 13",
      "evaluatedValue" : 8192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_PreferSortAscending",
      "docComment" : "Make the initial sort direction Ascending when first sorting on this column (default).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 15,
      "value" : "1 << 14",
      "evaluatedValue" : 16384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_PreferSortDescending",
      "docComment" : "Make the initial sort direction Descending when first sorting on this column.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 16,
      "value" : "1 << 15",
      "evaluatedValue" : 32768
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IndentEnable",
      "docComment" : "Use current Indent value when entering cell (default for column 0).",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 17,
      "value" : "1 << 16",
      "evaluatedValue" : 65536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IndentDisable",
      "docComment" : "Ignore current Indent value when entering cell (default for columns > 0). Indentation changes _within_ the cell will still be honored.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 18,
      "value" : "1 << 17",
      "evaluatedValue" : 131072
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IsEnabled",
      "docComment" : "Status: is enabled == not hidden by user/api (referred to as \"Hide\" in _DefaultHide and _NoHide) flags.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 19,
      "value" : "1 << 24",
      "evaluatedValue" : 16777216
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IsVisible",
      "docComment" : "Status: is visible == is enabled AND not clipped by scrolling.",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 20,
      "value" : "1 << 25",
      "evaluatedValue" : 33554432
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IsSorted",
      "docComment" : "Status: is currently part of the sort specs",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 21,
      "value" : "1 << 26",
      "evaluatedValue" : 67108864
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IsHovered",
      "docComment" : "Status: is hovered by mouse",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 22,
      "value" : "1 << 27",
      "evaluatedValue" : 134217728
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_WidthMask_",
      "docComment" : "[Internal] Combinations and masks",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 23,
      "value" : "ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_WidthFixed",
      "evaluatedValue" : 24
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_IndentMask_",
      "docComment" : "[Internal] Combinations and masks",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 24,
      "value" : "ImGuiTableColumnFlags_IndentEnable | ImGuiTableColumnFlags_IndentDisable",
      "evaluatedValue" : 196608
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_StatusMask_",
      "docComment" : "[Internal] Combinations and masks",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 25,
      "value" : "ImGuiTableColumnFlags_IsEnabled | ImGuiTableColumnFlags_IsVisible | ImGuiTableColumnFlags_IsSorted | ImGuiTableColumnFlags_IsHovered",
      "evaluatedValue" : 251658240
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableColumnFlags_NoDirectResize_",
      "docComment" : "[Internal] Disable user resizing this column directly (it may however we resized indirectly from its left edge)",
      "qualType" : "ImGuiTableColumnFlags_",
      "order" : 26,
      "value" : "1 << 30",
      "evaluatedValue" : 1073741824
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTableRowFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::TableNextRow()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableRowFlags_None",
      "qualType" : "ImGuiTableRowFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableRowFlags_Headers",
      "docComment" : "Identify header row (set default background color + width of its contents accounted differently for auto column width)",
      "qualType" : "ImGuiTableRowFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiTableBgTarget_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Enum for ImGui::TableSetBgColor()"
        }, {
          "@type" : "AstTextComment",
          "text" : " Background colors are rendering in 3 layers:"
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Layer 0: draw with RowBg0 color if set, otherwise draw with ColumnBg0 if set."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Layer 1: draw with RowBg1 color if set, otherwise draw with ColumnBg1 if set."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Layer 2: draw with CellBg color if set."
        }, {
          "@type" : "AstTextComment",
          "text" : " The purpose of the two row/columns layers is to let you decide if a background color changes should override or blend with the existing color."
        }, {
          "@type" : "AstTextComment",
          "text" : " When using ImGuiTableFlags_RowBg on the table, each row has the RowBg0 color automatically set for odd/even rows."
        }, {
          "@type" : "AstTextComment",
          "text" : " If you set the color of RowBg0 target, your color will override the existing RowBg0 color."
        }, {
          "@type" : "AstTextComment",
          "text" : " If you set the color of RowBg1 or ColumnBg1 target, your color will blend over the RowBg0 color."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableBgTarget_None",
      "qualType" : "ImGuiTableBgTarget_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableBgTarget_RowBg0",
      "docComment" : "Set row background color 0 (generally used for background, automatically set when ImGuiTableFlags_RowBg is used)",
      "qualType" : "ImGuiTableBgTarget_",
      "order" : 1,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableBgTarget_RowBg1",
      "docComment" : "Set row background color 1 (generally used for selection marking)",
      "qualType" : "ImGuiTableBgTarget_",
      "order" : 2,
      "value" : "2",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiTableBgTarget_CellBg",
      "docComment" : "Set cell background color (top-most color)",
      "qualType" : "ImGuiTableBgTarget_",
      "order" : 3,
      "value" : "3",
      "evaluatedValue" : 3
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiFocusedFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::IsWindowFocused()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_None",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_ChildWindows",
      "docComment" : "Return true if any children of the window is focused",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_RootWindow",
      "docComment" : "Test from root window (top most parent of the current hierarchy)",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_AnyWindow",
      "docComment" : "Return true if any window is focused. Important: If you are trying to tell how to dispatch your low-level inputs, do NOT use this. Use 'io.WantCaptureMouse' instead! Please read the FAQ!",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_NoPopupHierarchy",
      "docComment" : "Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_DockHierarchy",
      "docComment" : "Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiFocusedFlags_RootAndChildWindows",
      "qualType" : "ImGuiFocusedFlags_",
      "order" : 6,
      "value" : "ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows",
      "evaluatedValue" : 3
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiHoveredFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::IsItemHovered(), ImGui::IsWindowHovered()"
        }, {
          "@type" : "AstTextComment",
          "text" : " Note: if you are trying to check whether your mouse should be dispatched to Dear ImGui or to your app, you should use 'io.WantCaptureMouse' instead! Please read the FAQ!"
        }, {
          "@type" : "AstTextComment",
          "text" : " Note: windows with the ImGuiWindowFlags_NoInputs flag are ignored by IsWindowHovered() calls."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_None",
      "docComment" : "Return true if directly over the item/window, not obstructed by another window, not obstructed by an active popup or modal blocking inputs under them.",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_ChildWindows",
      "docComment" : "IsWindowHovered() only: Return true if any children of the window is hovered",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_RootWindow",
      "docComment" : "IsWindowHovered() only: Test from root window (top most parent of the current hierarchy)",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_AnyWindow",
      "docComment" : "IsWindowHovered() only: Return true if any window is hovered",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_NoPopupHierarchy",
      "docComment" : "IsWindowHovered() only: Do not consider popup hierarchy (do not treat popup emitter as parent of popup) (when used with _ChildWindows or _RootWindow)",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_DockHierarchy",
      "docComment" : "IsWindowHovered() only: Consider docking hierarchy (treat dockspace host as parent of docked window) (when used with _ChildWindows or _RootWindow)",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_AllowWhenBlockedByPopup",
      "docComment" : "Return true even if a popup window is normally blocking access to this item/window",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_AllowWhenBlockedByActiveItem",
      "docComment" : "Return true even if an active item is blocking access to this item/window. Useful for Drag and Drop patterns.",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 7,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_AllowWhenOverlapped",
      "docComment" : "IsItemHovered() only: Return true even if the position is obstructed or overlapped by another window",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 8,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_AllowWhenDisabled",
      "docComment" : "IsItemHovered() only: Return true even if the item is disabled",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 9,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_NoNavOverride",
      "docComment" : "Disable using gamepad/keyboard navigation state when active, always query mouse.",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 10,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_RectOnly",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 11,
      "value" : "ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped",
      "evaluatedValue" : 416
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiHoveredFlags_RootAndChildWindows",
      "qualType" : "ImGuiHoveredFlags_",
      "order" : 12,
      "value" : "ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows",
      "evaluatedValue" : 3
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiDockNodeFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::DockSpace(), shared/inherited by child nodes."
        }, {
          "@type" : "AstTextComment",
          "text" : " (Some flags can be applied to individual nodes directly)"
        }, {
          "@type" : "AstTextComment",
          "text" : " FIXME-DOCK: Also see ImGuiDockNodeFlagsPrivate_ which may involve using the WIP and internal DockBuilder api."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_None",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_KeepAliveOnly",
      "docComment" : "Shared       // Don't display the dockspace node but keep it alive. Windows docked into this dockspace node won't be undocked.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_NoDockingInCentralNode",
      "docComment" : "Shared       // Disable docking inside the Central Node, which will be always kept empty.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 2,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_PassthruCentralNode",
      "docComment" : "Shared       // Enable passthru dockspace: 1) DockSpace() will render a ImGuiCol_WindowBg background covering everything excepted the Central Node when empty. Meaning the host window should probably use SetNextWindowBgAlpha(0.0f) prior to Begin() when using this. 2) When Central Node is empty: let inputs pass-through + won't display a DockingEmptyBg background. See demo for details.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 3,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_NoSplit",
      "docComment" : "Shared/Local // Disable splitting the node into smaller nodes. Useful e.g. when embedding dockspaces into a main root one (the root one may have splitting disabled to reduce confusion). Note: when turned off, existing splits will be preserved.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 4,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_NoResize",
      "docComment" : "Shared/Local // Disable resizing node using the splitter/separators. Useful with programmatically setup dockspaces.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 5,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDockNodeFlags_AutoHideTabBar",
      "docComment" : "Shared/Local // Tab bar will automatically hide when there is a single window in the dock node.",
      "qualType" : "ImGuiDockNodeFlags_",
      "order" : 6,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiDragDropFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImGui::BeginDragDropSource(), ImGui::AcceptDragDropPayload()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_None",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceNoPreviewTooltip",
      "docComment" : "By default, a successful call to BeginDragDropSource opens a tooltip so you can display a preview or description of the source contents. This flag disable this behavior.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceNoDisableHover",
      "docComment" : "By default, when dragging we clear data so that IsItemHovered() will return false, to avoid subsequent user code submitting tooltips. This flag disable this behavior so you can still call IsItemHovered() on the source item.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceNoHoldToOpenOthers",
      "docComment" : "Disable the behavior that allows to open tree nodes and collapsing header by holding over them while dragging a source item.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceAllowNullID",
      "docComment" : "Allow items such as Text(), Image() that have no unique identifier to be used as drag source, by manufacturing a temporary identifier based on their window-relative position. This is extremely unusual within the dear imgui ecosystem and so we made it explicit.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceExtern",
      "docComment" : "External source (from outside of dear imgui), won't attempt to read current item/window info. Will always return true. Only one Extern source can be active simultaneously.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_SourceAutoExpirePayload",
      "docComment" : "Automatically expire the payload if the source cease to be submitted (otherwise payloads are persisting while being dragged)",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_AcceptBeforeDelivery",
      "docComment" : "AcceptDragDropPayload() will returns true even before the mouse button is released. You can then call IsDelivery() to test if the payload needs to be delivered.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 7,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
      "docComment" : "Do not draw the default highlight rectangle when hovering over target.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 8,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_AcceptNoPreviewTooltip",
      "docComment" : "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 9,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDragDropFlags_AcceptPeekOnly",
      "docComment" : "For peeking ahead and inspecting the payload before delivery.",
      "qualType" : "ImGuiDragDropFlags_",
      "order" : 10,
      "value" : "ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect",
      "evaluatedValue" : 3072
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiDataType_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " A primary data type"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_S8",
      "docComment" : "signed char / char (with sensible compilers)",
      "qualType" : "ImGuiDataType_",
      "order" : 0,
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_U8",
      "docComment" : "unsigned char",
      "qualType" : "ImGuiDataType_",
      "order" : 1,
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_S16",
      "docComment" : "short",
      "qualType" : "ImGuiDataType_",
      "order" : 2,
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_U16",
      "docComment" : "unsigned short",
      "qualType" : "ImGuiDataType_",
      "order" : 3,
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_S32",
      "docComment" : "int",
      "qualType" : "ImGuiDataType_",
      "order" : 4,
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_U32",
      "docComment" : "unsigned int",
      "qualType" : "ImGuiDataType_",
      "order" : 5,
      "evaluatedValue" : 5
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_S64",
      "docComment" : "long long / __int64",
      "qualType" : "ImGuiDataType_",
      "order" : 6,
      "evaluatedValue" : 6
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_U64",
      "docComment" : "unsigned long long / unsigned __int64",
      "qualType" : "ImGuiDataType_",
      "order" : 7,
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_Float",
      "docComment" : "float",
      "qualType" : "ImGuiDataType_",
      "order" : 8,
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_Double",
      "docComment" : "double",
      "qualType" : "ImGuiDataType_",
      "order" : 9,
      "evaluatedValue" : 9
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDataType_COUNT",
      "qualType" : "ImGuiDataType_",
      "order" : 10,
      "evaluatedValue" : 10
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiDir_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " A cardinal direction"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_None",
      "qualType" : "ImGuiDir_",
      "order" : 0,
      "value" : "-1",
      "evaluatedValue" : -1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_Left",
      "qualType" : "ImGuiDir_",
      "order" : 1,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_Right",
      "qualType" : "ImGuiDir_",
      "order" : 2,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_Up",
      "qualType" : "ImGuiDir_",
      "order" : 3,
      "value" : "2",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_Down",
      "qualType" : "ImGuiDir_",
      "order" : 4,
      "value" : "3",
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiDir_COUNT",
      "qualType" : "ImGuiDir_",
      "order" : 5,
      "evaluatedValue" : 4
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiSortDirection_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " A sorting direction"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSortDirection_None",
      "qualType" : "ImGuiSortDirection_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSortDirection_Ascending",
      "docComment" : "Ascending = 0->9, A->Z etc.",
      "qualType" : "ImGuiSortDirection_",
      "order" : 1,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSortDirection_Descending",
      "docComment" : "Descending = 9->0, Z->A etc.",
      "qualType" : "ImGuiSortDirection_",
      "order" : 2,
      "value" : "2",
      "evaluatedValue" : 2
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiKey_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Keys value 0 to 511 are left unused as legacy native/opaque key values ("
        }, {
          "@type" : "AstTextComment",
          "text" : "<"
        }, {
          "@type" : "AstTextComment",
          "text" : " 1.87)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Keys value >= 512 are named keys (>= 1.87)"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_None",
      "docComment" : "Keyboard",
      "qualType" : "ImGuiKey_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Tab",
      "docComment" : "== ImGuiKey_NamedKey_BEGIN",
      "qualType" : "ImGuiKey_",
      "order" : 1,
      "value" : "512",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftArrow",
      "qualType" : "ImGuiKey_",
      "order" : 2,
      "evaluatedValue" : 513
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightArrow",
      "qualType" : "ImGuiKey_",
      "order" : 3,
      "evaluatedValue" : 514
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_UpArrow",
      "qualType" : "ImGuiKey_",
      "order" : 4,
      "evaluatedValue" : 515
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_DownArrow",
      "qualType" : "ImGuiKey_",
      "order" : 5,
      "evaluatedValue" : 516
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_PageUp",
      "qualType" : "ImGuiKey_",
      "order" : 6,
      "evaluatedValue" : 517
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_PageDown",
      "qualType" : "ImGuiKey_",
      "order" : 7,
      "evaluatedValue" : 518
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Home",
      "qualType" : "ImGuiKey_",
      "order" : 8,
      "evaluatedValue" : 519
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_End",
      "qualType" : "ImGuiKey_",
      "order" : 9,
      "evaluatedValue" : 520
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Insert",
      "qualType" : "ImGuiKey_",
      "order" : 10,
      "evaluatedValue" : 521
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Delete",
      "qualType" : "ImGuiKey_",
      "order" : 11,
      "evaluatedValue" : 522
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Backspace",
      "qualType" : "ImGuiKey_",
      "order" : 12,
      "evaluatedValue" : 523
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Space",
      "qualType" : "ImGuiKey_",
      "order" : 13,
      "evaluatedValue" : 524
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Enter",
      "qualType" : "ImGuiKey_",
      "order" : 14,
      "evaluatedValue" : 525
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Escape",
      "qualType" : "ImGuiKey_",
      "order" : 15,
      "evaluatedValue" : 526
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftCtrl",
      "qualType" : "ImGuiKey_",
      "order" : 16,
      "evaluatedValue" : 527
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftShift",
      "qualType" : "ImGuiKey_",
      "order" : 17,
      "evaluatedValue" : 528
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftAlt",
      "qualType" : "ImGuiKey_",
      "order" : 18,
      "evaluatedValue" : 529
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftSuper",
      "qualType" : "ImGuiKey_",
      "order" : 19,
      "evaluatedValue" : 530
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightCtrl",
      "qualType" : "ImGuiKey_",
      "order" : 20,
      "evaluatedValue" : 531
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightShift",
      "qualType" : "ImGuiKey_",
      "order" : 21,
      "evaluatedValue" : 532
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightAlt",
      "qualType" : "ImGuiKey_",
      "order" : 22,
      "evaluatedValue" : 533
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightSuper",
      "qualType" : "ImGuiKey_",
      "order" : 23,
      "evaluatedValue" : 534
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Menu",
      "qualType" : "ImGuiKey_",
      "order" : 24,
      "evaluatedValue" : 535
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_0",
      "qualType" : "ImGuiKey_",
      "order" : 25,
      "evaluatedValue" : 536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_1",
      "qualType" : "ImGuiKey_",
      "order" : 26,
      "evaluatedValue" : 537
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_2",
      "qualType" : "ImGuiKey_",
      "order" : 27,
      "evaluatedValue" : 538
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_3",
      "qualType" : "ImGuiKey_",
      "order" : 28,
      "evaluatedValue" : 539
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_4",
      "qualType" : "ImGuiKey_",
      "order" : 29,
      "evaluatedValue" : 540
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_5",
      "qualType" : "ImGuiKey_",
      "order" : 30,
      "evaluatedValue" : 541
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_6",
      "qualType" : "ImGuiKey_",
      "order" : 31,
      "evaluatedValue" : 542
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_7",
      "qualType" : "ImGuiKey_",
      "order" : 32,
      "evaluatedValue" : 543
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_8",
      "qualType" : "ImGuiKey_",
      "order" : 33,
      "evaluatedValue" : 544
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_9",
      "qualType" : "ImGuiKey_",
      "order" : 34,
      "evaluatedValue" : 545
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_A",
      "qualType" : "ImGuiKey_",
      "order" : 35,
      "evaluatedValue" : 546
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_B",
      "qualType" : "ImGuiKey_",
      "order" : 36,
      "evaluatedValue" : 547
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_C",
      "qualType" : "ImGuiKey_",
      "order" : 37,
      "evaluatedValue" : 548
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_D",
      "qualType" : "ImGuiKey_",
      "order" : 38,
      "evaluatedValue" : 549
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_E",
      "qualType" : "ImGuiKey_",
      "order" : 39,
      "evaluatedValue" : 550
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F",
      "qualType" : "ImGuiKey_",
      "order" : 40,
      "evaluatedValue" : 551
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_G",
      "qualType" : "ImGuiKey_",
      "order" : 41,
      "evaluatedValue" : 552
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_H",
      "qualType" : "ImGuiKey_",
      "order" : 42,
      "evaluatedValue" : 553
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_I",
      "qualType" : "ImGuiKey_",
      "order" : 43,
      "evaluatedValue" : 554
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_J",
      "qualType" : "ImGuiKey_",
      "order" : 44,
      "evaluatedValue" : 555
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_K",
      "qualType" : "ImGuiKey_",
      "order" : 45,
      "evaluatedValue" : 556
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_L",
      "qualType" : "ImGuiKey_",
      "order" : 46,
      "evaluatedValue" : 557
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_M",
      "qualType" : "ImGuiKey_",
      "order" : 47,
      "evaluatedValue" : 558
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_N",
      "qualType" : "ImGuiKey_",
      "order" : 48,
      "evaluatedValue" : 559
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_O",
      "qualType" : "ImGuiKey_",
      "order" : 49,
      "evaluatedValue" : 560
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_P",
      "qualType" : "ImGuiKey_",
      "order" : 50,
      "evaluatedValue" : 561
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Q",
      "qualType" : "ImGuiKey_",
      "order" : 51,
      "evaluatedValue" : 562
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_R",
      "qualType" : "ImGuiKey_",
      "order" : 52,
      "evaluatedValue" : 563
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_S",
      "qualType" : "ImGuiKey_",
      "order" : 53,
      "evaluatedValue" : 564
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_T",
      "qualType" : "ImGuiKey_",
      "order" : 54,
      "evaluatedValue" : 565
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_U",
      "qualType" : "ImGuiKey_",
      "order" : 55,
      "evaluatedValue" : 566
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_V",
      "qualType" : "ImGuiKey_",
      "order" : 56,
      "evaluatedValue" : 567
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_W",
      "qualType" : "ImGuiKey_",
      "order" : 57,
      "evaluatedValue" : 568
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_X",
      "qualType" : "ImGuiKey_",
      "order" : 58,
      "evaluatedValue" : 569
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Y",
      "qualType" : "ImGuiKey_",
      "order" : 59,
      "evaluatedValue" : 570
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Z",
      "qualType" : "ImGuiKey_",
      "order" : 60,
      "evaluatedValue" : 571
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F1",
      "qualType" : "ImGuiKey_",
      "order" : 61,
      "evaluatedValue" : 572
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F2",
      "qualType" : "ImGuiKey_",
      "order" : 62,
      "evaluatedValue" : 573
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F3",
      "qualType" : "ImGuiKey_",
      "order" : 63,
      "evaluatedValue" : 574
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F4",
      "qualType" : "ImGuiKey_",
      "order" : 64,
      "evaluatedValue" : 575
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F5",
      "qualType" : "ImGuiKey_",
      "order" : 65,
      "evaluatedValue" : 576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F6",
      "qualType" : "ImGuiKey_",
      "order" : 66,
      "evaluatedValue" : 577
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F7",
      "qualType" : "ImGuiKey_",
      "order" : 67,
      "evaluatedValue" : 578
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F8",
      "qualType" : "ImGuiKey_",
      "order" : 68,
      "evaluatedValue" : 579
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F9",
      "qualType" : "ImGuiKey_",
      "order" : 69,
      "evaluatedValue" : 580
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F10",
      "qualType" : "ImGuiKey_",
      "order" : 70,
      "evaluatedValue" : 581
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F11",
      "qualType" : "ImGuiKey_",
      "order" : 71,
      "evaluatedValue" : 582
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_F12",
      "qualType" : "ImGuiKey_",
      "order" : 72,
      "evaluatedValue" : 583
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Apostrophe",
      "docComment" : "'",
      "qualType" : "ImGuiKey_",
      "order" : 73,
      "evaluatedValue" : 584
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Comma",
      "docComment" : ",",
      "qualType" : "ImGuiKey_",
      "order" : 74,
      "evaluatedValue" : 585
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Minus",
      "docComment" : "-",
      "qualType" : "ImGuiKey_",
      "order" : 75,
      "evaluatedValue" : 586
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Period",
      "docComment" : ".",
      "qualType" : "ImGuiKey_",
      "order" : 76,
      "evaluatedValue" : 587
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Slash",
      "docComment" : "/",
      "qualType" : "ImGuiKey_",
      "order" : 77,
      "evaluatedValue" : 588
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Semicolon",
      "docComment" : ";",
      "qualType" : "ImGuiKey_",
      "order" : 78,
      "evaluatedValue" : 589
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Equal",
      "docComment" : "=",
      "qualType" : "ImGuiKey_",
      "order" : 79,
      "evaluatedValue" : 590
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_LeftBracket",
      "docComment" : "[",
      "qualType" : "ImGuiKey_",
      "order" : 80,
      "evaluatedValue" : 591
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Backslash",
      "docComment" : " \\ (this text inhibit multiline comment caused by backslash)",
      "qualType" : "ImGuiKey_",
      "order" : 81,
      "evaluatedValue" : 592
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_RightBracket",
      "docComment" : "]",
      "qualType" : "ImGuiKey_",
      "order" : 82,
      "evaluatedValue" : 593
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GraveAccent",
      "docComment" : "`",
      "qualType" : "ImGuiKey_",
      "order" : 83,
      "evaluatedValue" : 594
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_CapsLock",
      "qualType" : "ImGuiKey_",
      "order" : 84,
      "evaluatedValue" : 595
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_ScrollLock",
      "qualType" : "ImGuiKey_",
      "order" : 85,
      "evaluatedValue" : 596
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_NumLock",
      "qualType" : "ImGuiKey_",
      "order" : 86,
      "evaluatedValue" : 597
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_PrintScreen",
      "qualType" : "ImGuiKey_",
      "order" : 87,
      "evaluatedValue" : 598
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Pause",
      "qualType" : "ImGuiKey_",
      "order" : 88,
      "evaluatedValue" : 599
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad0",
      "qualType" : "ImGuiKey_",
      "order" : 89,
      "evaluatedValue" : 600
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad1",
      "qualType" : "ImGuiKey_",
      "order" : 90,
      "evaluatedValue" : 601
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad2",
      "qualType" : "ImGuiKey_",
      "order" : 91,
      "evaluatedValue" : 602
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad3",
      "qualType" : "ImGuiKey_",
      "order" : 92,
      "evaluatedValue" : 603
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad4",
      "qualType" : "ImGuiKey_",
      "order" : 93,
      "evaluatedValue" : 604
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad5",
      "qualType" : "ImGuiKey_",
      "order" : 94,
      "evaluatedValue" : 605
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad6",
      "qualType" : "ImGuiKey_",
      "order" : 95,
      "evaluatedValue" : 606
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad7",
      "qualType" : "ImGuiKey_",
      "order" : 96,
      "evaluatedValue" : 607
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad8",
      "qualType" : "ImGuiKey_",
      "order" : 97,
      "evaluatedValue" : 608
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_Keypad9",
      "qualType" : "ImGuiKey_",
      "order" : 98,
      "evaluatedValue" : 609
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadDecimal",
      "qualType" : "ImGuiKey_",
      "order" : 99,
      "evaluatedValue" : 610
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadDivide",
      "qualType" : "ImGuiKey_",
      "order" : 100,
      "evaluatedValue" : 611
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadMultiply",
      "qualType" : "ImGuiKey_",
      "order" : 101,
      "evaluatedValue" : 612
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadSubtract",
      "qualType" : "ImGuiKey_",
      "order" : 102,
      "evaluatedValue" : 613
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadAdd",
      "qualType" : "ImGuiKey_",
      "order" : 103,
      "evaluatedValue" : 614
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadEnter",
      "qualType" : "ImGuiKey_",
      "order" : 104,
      "evaluatedValue" : 615
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeypadEqual",
      "qualType" : "ImGuiKey_",
      "order" : 105,
      "evaluatedValue" : 616
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadStart",
      "docComment" : "Menu (Xbox)          + (Switch)   Start/Options (PS) // --",
      "qualType" : "ImGuiKey_",
      "order" : 106,
      "evaluatedValue" : 617
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadBack",
      "docComment" : "View (Xbox)          - (Switch)   Share (PS)         // --",
      "qualType" : "ImGuiKey_",
      "order" : 107,
      "evaluatedValue" : 618
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadFaceUp",
      "docComment" : "Y (Xbox)             X (Switch)   Triangle (PS)      // -> ImGuiNavInput_Input",
      "qualType" : "ImGuiKey_",
      "order" : 108,
      "evaluatedValue" : 619
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadFaceDown",
      "docComment" : "A (Xbox)             B (Switch)   Cross (PS)         // -> ImGuiNavInput_Activate",
      "qualType" : "ImGuiKey_",
      "order" : 109,
      "evaluatedValue" : 620
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadFaceLeft",
      "docComment" : "X (Xbox)             Y (Switch)   Square (PS)        // -> ImGuiNavInput_Menu",
      "qualType" : "ImGuiKey_",
      "order" : 110,
      "evaluatedValue" : 621
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadFaceRight",
      "docComment" : "B (Xbox)             A (Switch)   Circle (PS)        // -> ImGuiNavInput_Cancel",
      "qualType" : "ImGuiKey_",
      "order" : 111,
      "evaluatedValue" : 622
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadDpadUp",
      "docComment" : "D-pad Up                                             // -> ImGuiNavInput_DpadUp",
      "qualType" : "ImGuiKey_",
      "order" : 112,
      "evaluatedValue" : 623
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadDpadDown",
      "docComment" : "D-pad Down                                           // -> ImGuiNavInput_DpadDown",
      "qualType" : "ImGuiKey_",
      "order" : 113,
      "evaluatedValue" : 624
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadDpadLeft",
      "docComment" : "D-pad Left                                           // -> ImGuiNavInput_DpadLeft",
      "qualType" : "ImGuiKey_",
      "order" : 114,
      "evaluatedValue" : 625
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadDpadRight",
      "docComment" : "D-pad Right                                          // -> ImGuiNavInput_DpadRight",
      "qualType" : "ImGuiKey_",
      "order" : 115,
      "evaluatedValue" : 626
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadL1",
      "docComment" : "L Bumper (Xbox)      L (Switch)   L1 (PS)            // -> ImGuiNavInput_FocusPrev + ImGuiNavInput_TweakSlow",
      "qualType" : "ImGuiKey_",
      "order" : 116,
      "evaluatedValue" : 627
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadR1",
      "docComment" : "R Bumper (Xbox)      R (Switch)   R1 (PS)            // -> ImGuiNavInput_FocusNext + ImGuiNavInput_TweakFast",
      "qualType" : "ImGuiKey_",
      "order" : 117,
      "evaluatedValue" : 628
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadL2",
      "docComment" : "L Trigger (Xbox)     ZL (Switch)  L2 (PS) [Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 118,
      "evaluatedValue" : 629
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadR2",
      "docComment" : "R Trigger (Xbox)     ZR (Switch)  R2 (PS) [Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 119,
      "evaluatedValue" : 630
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadL3",
      "docComment" : "L Thumbstick (Xbox)  L3 (Switch)  L3 (PS)",
      "qualType" : "ImGuiKey_",
      "order" : 120,
      "evaluatedValue" : 631
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadR3",
      "docComment" : "R Thumbstick (Xbox)  R3 (Switch)  R3 (PS)",
      "qualType" : "ImGuiKey_",
      "order" : 121,
      "evaluatedValue" : 632
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadLStickUp",
      "docComment" : "[Analog]                                             // -> ImGuiNavInput_LStickUp",
      "qualType" : "ImGuiKey_",
      "order" : 122,
      "evaluatedValue" : 633
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadLStickDown",
      "docComment" : "[Analog]                                             // -> ImGuiNavInput_LStickDown",
      "qualType" : "ImGuiKey_",
      "order" : 123,
      "evaluatedValue" : 634
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadLStickLeft",
      "docComment" : "[Analog]                                             // -> ImGuiNavInput_LStickLeft",
      "qualType" : "ImGuiKey_",
      "order" : 124,
      "evaluatedValue" : 635
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadLStickRight",
      "docComment" : "[Analog]                                             // -> ImGuiNavInput_LStickRight",
      "qualType" : "ImGuiKey_",
      "order" : 125,
      "evaluatedValue" : 636
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadRStickUp",
      "docComment" : "[Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 126,
      "evaluatedValue" : 637
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadRStickDown",
      "docComment" : "[Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 127,
      "evaluatedValue" : 638
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadRStickLeft",
      "docComment" : "[Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 128,
      "evaluatedValue" : 639
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_GamepadRStickRight",
      "docComment" : "[Analog]",
      "qualType" : "ImGuiKey_",
      "order" : 129,
      "evaluatedValue" : 640
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_ModCtrl",
      "docComment" : "Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls) - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc. - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl). - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys. In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...",
      "qualType" : "ImGuiKey_",
      "order" : 130,
      "evaluatedValue" : 641
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_ModShift",
      "docComment" : "Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls) - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc. - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl). - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys. In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...",
      "qualType" : "ImGuiKey_",
      "order" : 131,
      "evaluatedValue" : 642
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_ModAlt",
      "docComment" : "Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls) - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc. - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl). - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys. In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...",
      "qualType" : "ImGuiKey_",
      "order" : 132,
      "evaluatedValue" : 643
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_ModSuper",
      "docComment" : "Keyboard Modifiers (explicitly submitted by backend via AddKeyEvent() calls) - This is mirroring the data also written to io.KeyCtrl, io.KeyShift, io.KeyAlt, io.KeySuper, in a format allowing them to be accessed via standard key API, allowing calls such as IsKeyPressed(), IsKeyReleased(), querying duration etc. - Code polling every keys (e.g. an interface to detect a key press for input mapping) might want to ignore those and prefer using the real keys (e.g. ImGuiKey_LeftCtrl, ImGuiKey_RightCtrl instead of ImGuiKey_ModCtrl). - In theory the value of keyboard modifiers should be roughly equivalent to a logical or of the equivalent left/right keys. In practice: it's complicated; mods are often provided from different sources. Keyboard layout, IME, sticky keys and backends tend to interfere and break that equivalence. The safer decision is to relay that ambiguity down to the end-user...",
      "qualType" : "ImGuiKey_",
      "order" : 133,
      "evaluatedValue" : 644
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_COUNT",
      "docComment" : "No valid ImGuiKey is ever greater than this value",
      "qualType" : "ImGuiKey_",
      "order" : 134,
      "evaluatedValue" : 645
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_NamedKey_BEGIN",
      "docComment" : "[Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + a io.KeyMap[] array. We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)",
      "qualType" : "ImGuiKey_",
      "order" : 135,
      "value" : "512",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_NamedKey_END",
      "docComment" : "[Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + a io.KeyMap[] array. We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)",
      "qualType" : "ImGuiKey_",
      "order" : 136,
      "value" : "ImGuiKey_COUNT",
      "evaluatedValue" : 645
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_NamedKey_COUNT",
      "docComment" : "[Internal] Prior to 1.87 we required user to fill io.KeysDown[512] using their own native index + a io.KeyMap[] array. We are ditching this method but keeping a legacy path for user code doing e.g. IsKeyPressed(MY_NATIVE_KEY_CODE)",
      "qualType" : "ImGuiKey_",
      "order" : 137,
      "value" : "ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN",
      "evaluatedValue" : 133
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeysData_SIZE",
      "docComment" : "Size of KeysData[]: hold legacy 0..512 keycodes + named keys",
      "qualType" : "ImGuiKey_",
      "order" : 138,
      "value" : "ImGuiKey_COUNT",
      "evaluatedValue" : 645
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeysData_OFFSET",
      "docComment" : "First key stored in io.KeysData[0]. Accesses to io.KeysData[] must use (key - ImGuiKey_KeysData_OFFSET).",
      "qualType" : "ImGuiKey_",
      "order" : 139,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKey_KeyPadEnter",
      "docComment" : "Renamed in 1.87",
      "qualType" : "ImGuiKey_",
      "order" : 140,
      "value" : "ImGuiKey_KeypadEnter",
      "evaluatedValue" : 615
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiModFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper \"flags\" version of key-mods to store and compare multiple key-mods easily. Sometimes used for storage (e.g. io.KeyMods) but otherwise not much used in public API."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiModFlags_None",
      "qualType" : "ImGuiModFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiModFlags_Ctrl",
      "qualType" : "ImGuiModFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiModFlags_Shift",
      "qualType" : "ImGuiModFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiModFlags_Alt",
      "docComment" : "Menu",
      "qualType" : "ImGuiModFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiModFlags_Super",
      "docComment" : "Cmd/Super/Windows key",
      "qualType" : "ImGuiModFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiNavInput_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Gamepad/Keyboard navigation"
        }, {
          "@type" : "AstTextComment",
          "text" : " Since >= 1.87 backends you generally don't need to care about this enum since io.NavInputs[] is setup automatically. This might become private/internal some day."
        }, {
          "@type" : "AstTextComment",
          "text" : " Keyboard: Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard to enable. NewFrame() will automatically fill io.NavInputs[] based on your io.AddKeyEvent() calls."
        }, {
          "@type" : "AstTextComment",
          "text" : " Gamepad:  Set io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad to enable. Backend: set ImGuiBackendFlags_HasGamepad and fill the io.NavInputs[] fields before calling NewFrame(). Note that io.NavInputs[] is cleared by EndFrame()."
        }, {
          "@type" : "AstTextComment",
          "text" : " Read instructions in imgui.cpp for more details. Download PNG/PSD at http://dearimgui.org/controls_sheets."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_Activate",
      "docComment" : "Activate / Open / Toggle / Tweak value       // e.g. Cross  (PS4), A (Xbox), A (Switch), Space (Keyboard)",
      "qualType" : "ImGuiNavInput_",
      "order" : 0,
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_Cancel",
      "docComment" : "Cancel / Close / Exit                        // e.g. Circle (PS4), B (Xbox), B (Switch), Escape (Keyboard)",
      "qualType" : "ImGuiNavInput_",
      "order" : 1,
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_Input",
      "docComment" : "Text input / On-Screen keyboard              // e.g. Triang.(PS4), Y (Xbox), X (Switch), Return (Keyboard)",
      "qualType" : "ImGuiNavInput_",
      "order" : 2,
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_Menu",
      "docComment" : "Tap: Toggle menu / Hold: Focus, Move, Resize // e.g. Square (PS4), X (Xbox), Y (Switch), Alt (Keyboard)",
      "qualType" : "ImGuiNavInput_",
      "order" : 3,
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_DpadLeft",
      "docComment" : "Move / Tweak / Resize window (w/ PadMenu)    // e.g. D-pad Left/Right/Up/Down (Gamepads), Arrow keys (Keyboard)",
      "qualType" : "ImGuiNavInput_",
      "order" : 4,
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_DpadRight",
      "qualType" : "ImGuiNavInput_",
      "order" : 5,
      "evaluatedValue" : 5
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_DpadUp",
      "qualType" : "ImGuiNavInput_",
      "order" : 6,
      "evaluatedValue" : 6
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_DpadDown",
      "qualType" : "ImGuiNavInput_",
      "order" : 7,
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_LStickLeft",
      "docComment" : "Scroll / Move window (w/ PadMenu)            // e.g. Left Analog Stick Left/Right/Up/Down",
      "qualType" : "ImGuiNavInput_",
      "order" : 8,
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_LStickRight",
      "qualType" : "ImGuiNavInput_",
      "order" : 9,
      "evaluatedValue" : 9
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_LStickUp",
      "qualType" : "ImGuiNavInput_",
      "order" : 10,
      "evaluatedValue" : 10
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_LStickDown",
      "qualType" : "ImGuiNavInput_",
      "order" : 11,
      "evaluatedValue" : 11
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_FocusPrev",
      "docComment" : "Focus Next window (w/ PadMenu)               // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)",
      "qualType" : "ImGuiNavInput_",
      "order" : 12,
      "evaluatedValue" : 12
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_FocusNext",
      "docComment" : "Focus Prev window (w/ PadMenu)               // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)",
      "qualType" : "ImGuiNavInput_",
      "order" : 13,
      "evaluatedValue" : 13
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_TweakSlow",
      "docComment" : "Slower tweaks                                // e.g. L1 or L2 (PS4), LB or LT (Xbox), L or ZL (Switch)",
      "qualType" : "ImGuiNavInput_",
      "order" : 14,
      "evaluatedValue" : 14
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_TweakFast",
      "docComment" : "Faster tweaks                                // e.g. R1 or R2 (PS4), RB or RT (Xbox), R or ZL (Switch)",
      "qualType" : "ImGuiNavInput_",
      "order" : 15,
      "evaluatedValue" : 15
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_KeyLeft_",
      "docComment" : "Move left                                    // = Arrow keys",
      "qualType" : "ImGuiNavInput_",
      "order" : 16,
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_KeyRight_",
      "docComment" : "Move right",
      "qualType" : "ImGuiNavInput_",
      "order" : 17,
      "evaluatedValue" : 17
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_KeyUp_",
      "docComment" : "Move up",
      "qualType" : "ImGuiNavInput_",
      "order" : 18,
      "evaluatedValue" : 18
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_KeyDown_",
      "docComment" : "Move down",
      "qualType" : "ImGuiNavInput_",
      "order" : 19,
      "evaluatedValue" : 19
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiNavInput_COUNT",
      "qualType" : "ImGuiNavInput_",
      "order" : 20,
      "evaluatedValue" : 20
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiConfigFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Configuration flags stored in io.ConfigFlags. Set by user/application."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_None",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NavEnableKeyboard",
      "docComment" : "Master keyboard navigation enable flag. NewFrame() will automatically fill io.NavInputs[] based on io.AddKeyEvent() calls",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NavEnableGamepad",
      "docComment" : "Master gamepad navigation enable flag. This is mostly to instruct your imgui backend to fill io.NavInputs[]. Backend also needs to set ImGuiBackendFlags_HasGamepad.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NavEnableSetMousePos",
      "docComment" : "Instruct navigation to move the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is awkward. Will update io.MousePos and set io.WantSetMousePos=true. If enabled you MUST honor io.WantSetMousePos requests in your backend, otherwise ImGui will react as if the mouse is jumping around back and forth.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NavNoCaptureKeyboard",
      "docComment" : "Instruct navigation to not set the io.WantCaptureKeyboard flag when io.NavActive is set.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NoMouse",
      "docComment" : "Instruct imgui to clear mouse position/buttons in NewFrame(). This allows ignoring the mouse information set by the backend.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_NoMouseCursorChange",
      "docComment" : "Instruct backend to not alter mouse cursor shape and visibility. Use if the backend cursor changes are interfering with yours and you don't want to use SetMouseCursor() to change mouse cursor. You may want to honor requests from imgui by reading GetMouseCursor() yourself instead.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_DockingEnable",
      "docComment" : "Docking enable flags.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_ViewportsEnable",
      "docComment" : "Viewport enable flags (require both ImGuiBackendFlags_PlatformHasViewports + ImGuiBackendFlags_RendererHasViewports set by the respective backends)",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 8,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_DpiEnableScaleViewports",
      "docComment" : "[BETA: Don't use] FIXME-DPI: Reposition and resize imgui windows when the DpiScale of a viewport changed (mostly useful for the main viewport hosting other window). Note that resizing the main window itself is up to your application.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 9,
      "value" : "1 << 14",
      "evaluatedValue" : 16384
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_DpiEnableScaleFonts",
      "docComment" : "[BETA: Don't use] FIXME-DPI: Request bitmap-scaled fonts to match DpiScale. This is a very low-quality workaround. The correct way to handle DPI is _currently_ to replace the atlas and/or fonts in the Platform_OnChangedViewport callback, but this is all early work in progress.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 10,
      "value" : "1 << 15",
      "evaluatedValue" : 32768
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_IsSRGB",
      "docComment" : "Application is SRGB-aware.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 11,
      "value" : "1 << 20",
      "evaluatedValue" : 1048576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiConfigFlags_IsTouchScreen",
      "docComment" : "Application is using a touch screen instead of a mouse.",
      "qualType" : "ImGuiConfigFlags_",
      "order" : 12,
      "value" : "1 << 21",
      "evaluatedValue" : 2097152
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiBackendFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Backend capabilities flags stored in io.BackendFlags. Set by imgui_impl_xxx or custom backend."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_None",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_HasGamepad",
      "docComment" : "Backend Platform supports gamepad and currently has one connected.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_HasMouseCursors",
      "docComment" : "Backend Platform supports honoring GetMouseCursor() value to change the OS cursor shape.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_HasSetMousePos",
      "docComment" : "Backend Platform supports io.WantSetMousePos requests to reposition the OS mouse position (only used if ImGuiConfigFlags_NavEnableSetMousePos is set).",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_RendererHasVtxOffset",
      "docComment" : "Backend Renderer supports ImDrawCmd::VtxOffset. This enables output of large meshes (64K+ vertices) while still using 16-bit indices.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_PlatformHasViewports",
      "docComment" : "Backend Platform supports multiple viewports.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 5,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_HasMouseHoveredViewport",
      "docComment" : "Backend Platform supports calling io.AddMouseViewportEvent() with the viewport under the mouse. IF POSSIBLE, ignore viewports with the ImGuiViewportFlags_NoInputs flag (Win32 backend, GLFW 3.30+ backend can do this, SDL backend cannot). If this cannot be done, Dear ImGui needs to use a flawed heuristic to find the viewport under.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 6,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiBackendFlags_RendererHasViewports",
      "docComment" : "Backend Renderer supports multiple viewports.",
      "qualType" : "ImGuiBackendFlags_",
      "order" : 7,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiCol_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Enumeration for PushStyleColor() / PopStyleColor()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Text",
      "qualType" : "ImGuiCol_",
      "order" : 0,
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TextDisabled",
      "qualType" : "ImGuiCol_",
      "order" : 1,
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_WindowBg",
      "docComment" : "Background of normal windows",
      "qualType" : "ImGuiCol_",
      "order" : 2,
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ChildBg",
      "docComment" : "Background of child windows",
      "qualType" : "ImGuiCol_",
      "order" : 3,
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_PopupBg",
      "docComment" : "Background of popups, menus, tooltips windows",
      "qualType" : "ImGuiCol_",
      "order" : 4,
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Border",
      "qualType" : "ImGuiCol_",
      "order" : 5,
      "evaluatedValue" : 5
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_BorderShadow",
      "qualType" : "ImGuiCol_",
      "order" : 6,
      "evaluatedValue" : 6
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_FrameBg",
      "docComment" : "Background of checkbox, radio button, plot, slider, text input",
      "qualType" : "ImGuiCol_",
      "order" : 7,
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_FrameBgHovered",
      "qualType" : "ImGuiCol_",
      "order" : 8,
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_FrameBgActive",
      "qualType" : "ImGuiCol_",
      "order" : 9,
      "evaluatedValue" : 9
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TitleBg",
      "qualType" : "ImGuiCol_",
      "order" : 10,
      "evaluatedValue" : 10
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TitleBgActive",
      "qualType" : "ImGuiCol_",
      "order" : 11,
      "evaluatedValue" : 11
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TitleBgCollapsed",
      "qualType" : "ImGuiCol_",
      "order" : 12,
      "evaluatedValue" : 12
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_MenuBarBg",
      "qualType" : "ImGuiCol_",
      "order" : 13,
      "evaluatedValue" : 13
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ScrollbarBg",
      "qualType" : "ImGuiCol_",
      "order" : 14,
      "evaluatedValue" : 14
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ScrollbarGrab",
      "qualType" : "ImGuiCol_",
      "order" : 15,
      "evaluatedValue" : 15
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ScrollbarGrabHovered",
      "qualType" : "ImGuiCol_",
      "order" : 16,
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ScrollbarGrabActive",
      "qualType" : "ImGuiCol_",
      "order" : 17,
      "evaluatedValue" : 17
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_CheckMark",
      "qualType" : "ImGuiCol_",
      "order" : 18,
      "evaluatedValue" : 18
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_SliderGrab",
      "qualType" : "ImGuiCol_",
      "order" : 19,
      "evaluatedValue" : 19
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_SliderGrabActive",
      "qualType" : "ImGuiCol_",
      "order" : 20,
      "evaluatedValue" : 20
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Button",
      "qualType" : "ImGuiCol_",
      "order" : 21,
      "evaluatedValue" : 21
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ButtonHovered",
      "qualType" : "ImGuiCol_",
      "order" : 22,
      "evaluatedValue" : 22
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ButtonActive",
      "qualType" : "ImGuiCol_",
      "order" : 23,
      "evaluatedValue" : 23
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Header",
      "docComment" : "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem",
      "qualType" : "ImGuiCol_",
      "order" : 24,
      "evaluatedValue" : 24
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_HeaderHovered",
      "qualType" : "ImGuiCol_",
      "order" : 25,
      "evaluatedValue" : 25
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_HeaderActive",
      "qualType" : "ImGuiCol_",
      "order" : 26,
      "evaluatedValue" : 26
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Separator",
      "qualType" : "ImGuiCol_",
      "order" : 27,
      "evaluatedValue" : 27
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_SeparatorHovered",
      "qualType" : "ImGuiCol_",
      "order" : 28,
      "evaluatedValue" : 28
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_SeparatorActive",
      "qualType" : "ImGuiCol_",
      "order" : 29,
      "evaluatedValue" : 29
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ResizeGrip",
      "docComment" : "Resize grip in lower-right and lower-left corners of windows.",
      "qualType" : "ImGuiCol_",
      "order" : 30,
      "evaluatedValue" : 30
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ResizeGripHovered",
      "qualType" : "ImGuiCol_",
      "order" : 31,
      "evaluatedValue" : 31
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ResizeGripActive",
      "qualType" : "ImGuiCol_",
      "order" : 32,
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_Tab",
      "docComment" : "TabItem in a TabBar",
      "qualType" : "ImGuiCol_",
      "order" : 33,
      "evaluatedValue" : 33
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TabHovered",
      "qualType" : "ImGuiCol_",
      "order" : 34,
      "evaluatedValue" : 34
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TabActive",
      "qualType" : "ImGuiCol_",
      "order" : 35,
      "evaluatedValue" : 35
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TabUnfocused",
      "qualType" : "ImGuiCol_",
      "order" : 36,
      "evaluatedValue" : 36
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TabUnfocusedActive",
      "qualType" : "ImGuiCol_",
      "order" : 37,
      "evaluatedValue" : 37
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_DockingPreview",
      "docComment" : "Preview overlay color when about to docking something",
      "qualType" : "ImGuiCol_",
      "order" : 38,
      "evaluatedValue" : 38
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_DockingEmptyBg",
      "docComment" : "Background color for empty node (e.g. CentralNode with no window docked into it)",
      "qualType" : "ImGuiCol_",
      "order" : 39,
      "evaluatedValue" : 39
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_PlotLines",
      "qualType" : "ImGuiCol_",
      "order" : 40,
      "evaluatedValue" : 40
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_PlotLinesHovered",
      "qualType" : "ImGuiCol_",
      "order" : 41,
      "evaluatedValue" : 41
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_PlotHistogram",
      "qualType" : "ImGuiCol_",
      "order" : 42,
      "evaluatedValue" : 42
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_PlotHistogramHovered",
      "qualType" : "ImGuiCol_",
      "order" : 43,
      "evaluatedValue" : 43
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TableHeaderBg",
      "docComment" : "Table header background",
      "qualType" : "ImGuiCol_",
      "order" : 44,
      "evaluatedValue" : 44
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TableBorderStrong",
      "docComment" : "Table outer and header borders (prefer using Alpha=1.0 here)",
      "qualType" : "ImGuiCol_",
      "order" : 45,
      "evaluatedValue" : 45
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TableBorderLight",
      "docComment" : "Table inner borders (prefer using Alpha=1.0 here)",
      "qualType" : "ImGuiCol_",
      "order" : 46,
      "evaluatedValue" : 46
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TableRowBg",
      "docComment" : "Table row background (even rows)",
      "qualType" : "ImGuiCol_",
      "order" : 47,
      "evaluatedValue" : 47
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TableRowBgAlt",
      "docComment" : "Table row background (odd rows)",
      "qualType" : "ImGuiCol_",
      "order" : 48,
      "evaluatedValue" : 48
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_TextSelectedBg",
      "qualType" : "ImGuiCol_",
      "order" : 49,
      "evaluatedValue" : 49
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_DragDropTarget",
      "docComment" : "Rectangle highlighting a drop target",
      "qualType" : "ImGuiCol_",
      "order" : 50,
      "evaluatedValue" : 50
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_NavHighlight",
      "docComment" : "Gamepad/keyboard: current highlighted item",
      "qualType" : "ImGuiCol_",
      "order" : 51,
      "evaluatedValue" : 51
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_NavWindowingHighlight",
      "docComment" : "Highlight window when using CTRL+TAB",
      "qualType" : "ImGuiCol_",
      "order" : 52,
      "evaluatedValue" : 52
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_NavWindowingDimBg",
      "docComment" : "Darken/colorize entire screen behind the CTRL+TAB window list, when active",
      "qualType" : "ImGuiCol_",
      "order" : 53,
      "evaluatedValue" : 53
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_ModalWindowDimBg",
      "docComment" : "Darken/colorize entire screen behind a modal window, when one is active",
      "qualType" : "ImGuiCol_",
      "order" : 54,
      "evaluatedValue" : 54
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCol_COUNT",
      "qualType" : "ImGuiCol_",
      "order" : 55,
      "evaluatedValue" : 55
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiStyleVar_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Enumeration for PushStyleVar() / PopStyleVar() to temporarily modify the ImGuiStyle structure."
        }, {
          "@type" : "AstTextComment",
          "text" : " - The enum only refers to fields of ImGuiStyle which makes sense to be pushed/popped inside UI code."
        }, {
          "@type" : "AstTextComment",
          "text" : "   During initialization or between frames, feel free to just poke into ImGuiStyle directly."
        }, {
          "@type" : "AstTextComment",
          "text" : " - Tip: Use your programming IDE navigation facilities on the names in the _second column_ below to find the actual members and their description."
        }, {
          "@type" : "AstTextComment",
          "text" : "   In Visual Studio IDE: CTRL+comma (\"Edit.GoToAll\") can follow symbols in comments, whereas CTRL+F12 (\"Edit.GoToImplementation\") cannot."
        }, {
          "@type" : "AstTextComment",
          "text" : "   With Visual Assist installed: ALT+G (\"VAssistX.GoToImplementation\") can also follow symbols in comments."
        }, {
          "@type" : "AstTextComment",
          "text" : " - When changing this enum, you need to update the associated internal table GStyleVarInfo[] accordingly. This is where we link enum values to members offset/type."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_Alpha",
      "docComment" : "float     Alpha",
      "qualType" : "ImGuiStyleVar_",
      "order" : 0,
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_DisabledAlpha",
      "docComment" : "float     DisabledAlpha",
      "qualType" : "ImGuiStyleVar_",
      "order" : 1,
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_WindowPadding",
      "docComment" : "ImVec2    WindowPadding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 2,
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_WindowRounding",
      "docComment" : "float     WindowRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 3,
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_WindowBorderSize",
      "docComment" : "float     WindowBorderSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 4,
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_WindowMinSize",
      "docComment" : "ImVec2    WindowMinSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 5,
      "evaluatedValue" : 5
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_WindowTitleAlign",
      "docComment" : "ImVec2    WindowTitleAlign",
      "qualType" : "ImGuiStyleVar_",
      "order" : 6,
      "evaluatedValue" : 6
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ChildRounding",
      "docComment" : "float     ChildRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 7,
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ChildBorderSize",
      "docComment" : "float     ChildBorderSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 8,
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_PopupRounding",
      "docComment" : "float     PopupRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 9,
      "evaluatedValue" : 9
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_PopupBorderSize",
      "docComment" : "float     PopupBorderSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 10,
      "evaluatedValue" : 10
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_FramePadding",
      "docComment" : "ImVec2    FramePadding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 11,
      "evaluatedValue" : 11
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_FrameRounding",
      "docComment" : "float     FrameRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 12,
      "evaluatedValue" : 12
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_FrameBorderSize",
      "docComment" : "float     FrameBorderSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 13,
      "evaluatedValue" : 13
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ItemSpacing",
      "docComment" : "ImVec2    ItemSpacing",
      "qualType" : "ImGuiStyleVar_",
      "order" : 14,
      "evaluatedValue" : 14
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ItemInnerSpacing",
      "docComment" : "ImVec2    ItemInnerSpacing",
      "qualType" : "ImGuiStyleVar_",
      "order" : 15,
      "evaluatedValue" : 15
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_IndentSpacing",
      "docComment" : "float     IndentSpacing",
      "qualType" : "ImGuiStyleVar_",
      "order" : 16,
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_CellPadding",
      "docComment" : "ImVec2    CellPadding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 17,
      "evaluatedValue" : 17
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ScrollbarSize",
      "docComment" : "float     ScrollbarSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 18,
      "evaluatedValue" : 18
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ScrollbarRounding",
      "docComment" : "float     ScrollbarRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 19,
      "evaluatedValue" : 19
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_GrabMinSize",
      "docComment" : "float     GrabMinSize",
      "qualType" : "ImGuiStyleVar_",
      "order" : 20,
      "evaluatedValue" : 20
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_GrabRounding",
      "docComment" : "float     GrabRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 21,
      "evaluatedValue" : 21
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_TabRounding",
      "docComment" : "float     TabRounding",
      "qualType" : "ImGuiStyleVar_",
      "order" : 22,
      "evaluatedValue" : 22
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_ButtonTextAlign",
      "docComment" : "ImVec2    ButtonTextAlign",
      "qualType" : "ImGuiStyleVar_",
      "order" : 23,
      "evaluatedValue" : 23
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_SelectableTextAlign",
      "docComment" : "ImVec2    SelectableTextAlign",
      "qualType" : "ImGuiStyleVar_",
      "order" : 24,
      "evaluatedValue" : 24
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiStyleVar_COUNT",
      "qualType" : "ImGuiStyleVar_",
      "order" : 25,
      "evaluatedValue" : 25
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiButtonFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for InvisibleButton() [extended in imgui_internal.h]"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_None",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_MouseButtonLeft",
      "docComment" : "React on left mouse button (default)",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_MouseButtonRight",
      "docComment" : "React on right mouse button",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_MouseButtonMiddle",
      "docComment" : "React on center mouse button",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_MouseButtonMask_",
      "docComment" : "[Internal]",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 4,
      "value" : "ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight | ImGuiButtonFlags_MouseButtonMiddle",
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiButtonFlags_MouseButtonDefault_",
      "docComment" : "[Internal]",
      "qualType" : "ImGuiButtonFlags_",
      "order" : 5,
      "value" : "ImGuiButtonFlags_MouseButtonLeft",
      "evaluatedValue" : 1
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiColorEditFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ColorEdit3() / ColorEdit4() / ColorPicker3() / ColorPicker4() / ColorButton()"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_None",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoAlpha",
      "docComment" : "// ColorEdit, ColorPicker, ColorButton: ignore Alpha component (will only read 3 components from the input pointer).",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 1,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoPicker",
      "docComment" : "// ColorEdit: disable picker when clicking on color square.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 2,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoOptions",
      "docComment" : "// ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 3,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoSmallPreview",
      "docComment" : "// ColorEdit, ColorPicker: disable color square preview next to the inputs. (e.g. to show only the inputs)",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 4,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoInputs",
      "docComment" : "// ColorEdit, ColorPicker: disable inputs sliders/text widgets (e.g. to show only the small preview color square).",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 5,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoTooltip",
      "docComment" : "// ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 6,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoLabel",
      "docComment" : "// ColorEdit, ColorPicker: disable display of inline text label (the label is still forwarded to the tooltip and picker).",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 7,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoSidePreview",
      "docComment" : "// ColorPicker: disable bigger color preview on right side of the picker, use small color square preview instead.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 8,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoDragDrop",
      "docComment" : "// ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 9,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_NoBorder",
      "docComment" : "// ColorButton: disable border (which is enforced by default)",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 10,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_AlphaBar",
      "docComment" : "// ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 11,
      "value" : "1 << 16",
      "evaluatedValue" : 65536
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_AlphaPreview",
      "docComment" : "// ColorEdit, ColorPicker, ColorButton: display preview as a transparent color over a checkerboard, instead of opaque.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 12,
      "value" : "1 << 17",
      "evaluatedValue" : 131072
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_AlphaPreviewHalf",
      "docComment" : "// ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard, instead of opaque.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 13,
      "value" : "1 << 18",
      "evaluatedValue" : 262144
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_HDR",
      "docComment" : "// (WIP) ColorEdit: Currently only disable 0.0f..1.0f limits in RGBA edition (note: you probably want to use ImGuiColorEditFlags_Float flag as well).",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 14,
      "value" : "1 << 19",
      "evaluatedValue" : 524288
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DisplayRGB",
      "docComment" : "[Display]    // ColorEdit: override _display_ type among RGB/HSV/Hex. ColorPicker: select any combination using one or more of RGB/HSV/Hex.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 15,
      "value" : "1 << 20",
      "evaluatedValue" : 1048576
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DisplayHSV",
      "docComment" : "[Display]    // \"",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 16,
      "value" : "1 << 21",
      "evaluatedValue" : 2097152
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DisplayHex",
      "docComment" : "[Display]    // \"",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 17,
      "value" : "1 << 22",
      "evaluatedValue" : 4194304
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_Uint8",
      "docComment" : "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 18,
      "value" : "1 << 23",
      "evaluatedValue" : 8388608
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_Float",
      "docComment" : "[DataType]   // ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0f..1.0f floats instead of 0..255 integers. No round-trip of value via integers.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 19,
      "value" : "1 << 24",
      "evaluatedValue" : 16777216
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_PickerHueBar",
      "docComment" : "[Picker]     // ColorPicker: bar for Hue, rectangle for Sat/Value.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 20,
      "value" : "1 << 25",
      "evaluatedValue" : 33554432
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_PickerHueWheel",
      "docComment" : "[Picker]     // ColorPicker: wheel for Hue, triangle for Sat/Value.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 21,
      "value" : "1 << 26",
      "evaluatedValue" : 67108864
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_InputRGB",
      "docComment" : "[Input]      // ColorEdit, ColorPicker: input and output data in RGB format.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 22,
      "value" : "1 << 27",
      "evaluatedValue" : 134217728
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_InputHSV",
      "docComment" : "[Input]      // ColorEdit, ColorPicker: input and output data in HSV format.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 23,
      "value" : "1 << 28",
      "evaluatedValue" : 268435456
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DefaultOptions_",
      "docComment" : "Defaults Options. You can set application defaults using SetColorEditOptions(). The intent is that you probably don't want to override them in most of your calls. Let the user choose via the option menu and/or call SetColorEditOptions() once during startup.",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 24,
      "value" : "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_PickerHueBar",
      "evaluatedValue" : 177209344
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DisplayMask_",
      "docComment" : "[Internal] Masks",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 25,
      "value" : "ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_DisplayHex",
      "evaluatedValue" : 7340032
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_DataTypeMask_",
      "docComment" : "[Internal] Masks",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 26,
      "value" : "ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float",
      "evaluatedValue" : 25165824
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_PickerMask_",
      "docComment" : "[Internal] Masks",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 27,
      "value" : "ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_PickerHueBar",
      "evaluatedValue" : 100663296
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiColorEditFlags_InputMask_",
      "docComment" : "[Internal] Masks",
      "qualType" : "ImGuiColorEditFlags_",
      "order" : 28,
      "value" : "ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_InputHSV",
      "evaluatedValue" : 402653184
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiSliderFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for DragFloat(), DragInt(), SliderFloat(), SliderInt() etc."
        }, {
          "@type" : "AstTextComment",
          "text" : " We use the same sets of flags for DragXXX() and SliderXXX() functions as the features are the same and it makes it easier to swap them."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_None",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_AlwaysClamp",
      "docComment" : "Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 1,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_Logarithmic",
      "docComment" : "Make the widget logarithmic (linear otherwise). Consider using ImGuiSliderFlags_NoRoundToFormat with this if using a format-string with small amount of digits.",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 2,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_NoRoundToFormat",
      "docComment" : "Disable rounding underlying value to match precision of the display format string (e.g. %.3f values are rounded to those 3 digits)",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 3,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_NoInput",
      "docComment" : "Disable CTRL+Click or Enter key allowing to input text directly into the widget",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 4,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_InvalidMask_",
      "docComment" : "[Internal] We treat using those bits as being potentially a 'float power' argument from the previous API that has got miscast to this enum, and will trigger an assert if needed.",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 5,
      "value" : "0x7000000F",
      "evaluatedValue" : 1879048207
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiSliderFlags_ClampOnInput",
      "docComment" : "[renamed in 1.79]",
      "qualType" : "ImGuiSliderFlags_",
      "order" : 6,
      "value" : "ImGuiSliderFlags_AlwaysClamp",
      "evaluatedValue" : 16
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiMouseButton_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Identify a mouse button."
        }, {
          "@type" : "AstTextComment",
          "text" : " Those values are guaranteed to be stable and we frequently use 0/1 directly. Named enums provided for convenience."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseButton_Left",
      "qualType" : "ImGuiMouseButton_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseButton_Right",
      "qualType" : "ImGuiMouseButton_",
      "order" : 1,
      "value" : "1",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseButton_Middle",
      "qualType" : "ImGuiMouseButton_",
      "order" : 2,
      "value" : "2",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseButton_COUNT",
      "qualType" : "ImGuiMouseButton_",
      "order" : 3,
      "value" : "5",
      "evaluatedValue" : 5
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiMouseCursor_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Enumeration for GetMouseCursor()"
        }, {
          "@type" : "AstTextComment",
          "text" : " User code may request backend to display given cursor by calling SetMouseCursor(), which is why we have some cursors that are marked unused here"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_None",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 0,
      "value" : "-1",
      "evaluatedValue" : -1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_Arrow",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 1,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_TextInput",
      "docComment" : "When hovering over InputText, etc.",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 2,
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_ResizeAll",
      "docComment" : "(Unused by Dear ImGui functions)",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 3,
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_ResizeNS",
      "docComment" : "When hovering over an horizontal border",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 4,
      "evaluatedValue" : 3
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_ResizeEW",
      "docComment" : "When hovering over a vertical border or a column",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 5,
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_ResizeNESW",
      "docComment" : "When hovering over the bottom-left corner of a window",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 6,
      "evaluatedValue" : 5
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_ResizeNWSE",
      "docComment" : "When hovering over the bottom-right corner of a window",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 7,
      "evaluatedValue" : 6
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_Hand",
      "docComment" : "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 8,
      "evaluatedValue" : 7
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_NotAllowed",
      "docComment" : "When hovering something with disallowed interaction. Usually a crossed circle.",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 9,
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiMouseCursor_COUNT",
      "qualType" : "ImGuiMouseCursor_",
      "order" : 10,
      "evaluatedValue" : 9
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiCond_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Enumeration for ImGui::SetWindow***(), SetNextWindow***(), SetNextItem***() functions"
        }, {
          "@type" : "AstTextComment",
          "text" : " Represent a condition."
        }, {
          "@type" : "AstTextComment",
          "text" : " Important: Treat as a regular enum! Do NOT combine multiple values using binary operators! All the functions above treat 0 as a shortcut to ImGuiCond_Always."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCond_None",
      "docComment" : "No condition (always set the variable), same as _Always",
      "qualType" : "ImGuiCond_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCond_Always",
      "docComment" : "No condition (always set the variable)",
      "qualType" : "ImGuiCond_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCond_Once",
      "docComment" : "Set the variable once per runtime session (only the first call will succeed)",
      "qualType" : "ImGuiCond_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCond_FirstUseEver",
      "docComment" : "Set the variable if the object/window has no persistently saved data (no entry in .ini file)",
      "qualType" : "ImGuiCond_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiCond_Appearing",
      "docComment" : "Set the variable if the object/window is appearing after being hidden/inactive (or the first time)",
      "qualType" : "ImGuiCond_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImNewWrapper",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " IM_MALLOC(), IM_FREE(), IM_NEW(), IM_PLACEMENT_NEW(), IM_DELETE()"
        }, {
          "@type" : "AstTextComment",
          "text" : " We call C++ constructor on own allocated memory via the placement \"new(ptr) Type()\" syntax."
        }, {
          "@type" : "AstTextComment",
          "text" : " Defining a custom placement new() with a custom parameter allows us to bypass including "
        }, {
          "@type" : "AstTextComment",
          "text" : "<new"
        }, {
          "@type" : "AstTextComment",
          "text" : "> which on some platforms complains when user has disabled exceptions."
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiStyle",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " [SECTION] ImGuiStyle"
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " You may modify the ImGui::GetStyle() main instance during initialization and before NewFrame()."
        }, {
          "@type" : "AstTextComment",
          "text" : " During the frame, use ImGui::PushStyleVar(ImGuiStyleVar_XXXX)/PopStyleVar() to alter the main style values,"
        }, {
          "@type" : "AstTextComment",
          "text" : " and ImGui::PushStyleColor(ImGuiCol_XXX)/PopStyleColor() for colors."
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Alpha",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisabledAlpha",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowPadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowBorderSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowMinSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowTitleAlign",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WindowMenuButtonPosition",
      "qualType" : "ImGuiDir",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ChildRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ChildBorderSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PopupRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PopupBorderSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FramePadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FrameRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FrameBorderSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ItemSpacing",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ItemInnerSpacing",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CellPadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TouchExtraPadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IndentSpacing",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ColumnsMinSpacing",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ScrollbarSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ScrollbarRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GrabMinSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GrabRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "LogSliderDeadzone",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TabRounding",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TabBorderSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TabMinWidthForCloseButton",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ColorButtonPosition",
      "qualType" : "ImGuiDir",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ButtonTextAlign",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SelectableTextAlign",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplayWindowPadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplaySafeAreaPadding",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseCursorScale",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AntiAliasedLines",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AntiAliasedLinesUseTex",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AntiAliasedFill",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CurveTessellationTol",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CircleTessellationMaxError",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Colors",
      "qualType" : "ImVec4[55]",
      "desugaredQualType" : "ImVec4[55]"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ScaleAllSizes",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "scale_factor",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiKeyData",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " [Internal] Storage used by IsKeyDown(), IsKeyPressed() etc functions."
        }, {
          "@type" : "AstTextComment",
          "text" : " If prior to 1.87 you used io.KeysDownDuration[] (which was marked as internal), you should use GetKeyData(key)->DownDuration and not io.KeysData[key]->DownDuration."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Down",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DownDuration",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DownDurationPrev",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AnalogValue",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiIO",
    "decls" : [ {
      "@type" : "AstFieldDecl",
      "name" : "ConfigFlags",
      "qualType" : "ImGuiConfigFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendFlags",
      "qualType" : "ImGuiBackendFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplaySize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DeltaTime",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IniSavingRate",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IniFilename",
      "qualType" : "const char *",
      "desugaredQualType" : "const char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "LogFilename",
      "qualType" : "const char *",
      "desugaredQualType" : "const char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDoubleClickTime",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDoubleClickMaxDist",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDragThreshold",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyRepeatDelay",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyRepeatRate",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Fonts",
      "qualType" : "ImFontAtlas *",
      "desugaredQualType" : "ImFontAtlas *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontGlobalScale",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontAllowUserScaling",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontDefault",
      "qualType" : "ImFont *",
      "desugaredQualType" : "ImFont *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplayFramebufferScale",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDockingNoSplit",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDockingWithShift",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDockingAlwaysTabBar",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDockingTransparentPayload",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigViewportsNoAutoMerge",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigViewportsNoTaskBarIcon",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigViewportsNoDecoration",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigViewportsNoDefaultParent",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDrawCursor",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigMacOSXBehaviors",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigInputTrickleEventQueue",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigInputTextCursorBlink",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDragClickToInputText",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigWindowsResizeFromEdges",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigWindowsMoveFromTitleBarOnly",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigMemoryCompactTimer",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendPlatformName",
      "qualType" : "const char *",
      "desugaredQualType" : "const char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendRendererName",
      "qualType" : "const char *",
      "desugaredQualType" : "const char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendPlatformUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendRendererUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendLanguageUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GetClipboardTextFn",
      "qualType" : "const char *(*)(void *)",
      "desugaredQualType" : "const char *(*)(void *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SetClipboardTextFn",
      "qualType" : "void (*)(void *, const char *)",
      "desugaredQualType" : "void (*)(void *, const char *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ClipboardUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SetPlatformImeDataFn",
      "qualType" : "void (*)(ImGuiViewport *, ImGuiPlatformImeData *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, ImGuiPlatformImeData *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ImeWindowHandle",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddKeyEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "down",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Input Functions"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddKeyAnalogEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "down",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddMousePosEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "y",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddMouseButtonEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "button",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "down",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddMouseWheelEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "wh_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wh_y",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddMouseViewportEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFocusEvent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "focused",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddInputCharacter",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "unsigned int",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddInputCharacterUTF16",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar16",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddInputCharactersUTF8",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetKeyEventNativeData",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "native_keycode",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "native_scancode",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "native_legacy_index",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetAppAcceptingEvents",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "accepting_events",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearInputCharacters",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearInputKeys",
      "resultType" : "void"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantCaptureMouse",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantCaptureKeyboard",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantTextInput",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantSetMousePos",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantSaveIniSettings",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "NavActive",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "NavVisible",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Framerate",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsRenderVertices",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsRenderIndices",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsRenderWindows",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsActiveWindows",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsActiveAllocations",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDelta",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyMap",
      "qualType" : "int[645]",
      "desugaredQualType" : "int[645]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeysDown",
      "qualType" : "bool[645]",
      "desugaredQualType" : "bool[645]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MousePos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDown",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseWheel",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseWheelH",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseHoveredViewport",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyCtrl",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyShift",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyAlt",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeySuper",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "NavInputs",
      "qualType" : "float[20]",
      "desugaredQualType" : "float[20]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeyMods",
      "qualType" : "ImGuiModFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "KeysData",
      "qualType" : "ImGuiKeyData[645]",
      "desugaredQualType" : "ImGuiKeyData[645]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantCaptureMouseUnlessPopupClose",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MousePosPrev",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseClickedPos",
      "qualType" : "ImVec2[5]",
      "desugaredQualType" : "ImVec2[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseClickedTime",
      "qualType" : "double[5]",
      "desugaredQualType" : "double[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseClicked",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDoubleClicked",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseClickedCount",
      "qualType" : "ImU16[5]",
      "desugaredQualType" : "ImU16[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseClickedLastCount",
      "qualType" : "ImU16[5]",
      "desugaredQualType" : "ImU16[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseReleased",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDownOwned",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDownOwnedUnlessPopupClose",
      "qualType" : "bool[5]",
      "desugaredQualType" : "bool[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDownDuration",
      "qualType" : "float[5]",
      "desugaredQualType" : "float[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDownDurationPrev",
      "qualType" : "float[5]",
      "desugaredQualType" : "float[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDragMaxDistanceAbs",
      "qualType" : "ImVec2[5]",
      "desugaredQualType" : "ImVec2[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MouseDragMaxDistanceSqr",
      "qualType" : "float[5]",
      "desugaredQualType" : "float[5]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "NavInputsDownDuration",
      "qualType" : "float[20]",
      "desugaredQualType" : "float[20]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "NavInputsDownDurationPrev",
      "qualType" : "float[20]",
      "desugaredQualType" : "float[20]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PenPressure",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AppFocusLost",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AppAcceptingEvents",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendUsingLegacyKeyArrays",
      "qualType" : "ImS8",
      "desugaredQualType" : "signed char"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BackendUsingLegacyNavInputArray",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "InputQueueSurrogate",
      "qualType" : "ImWchar16",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "InputQueueCharacters",
      "qualType" : "ImVector<ImWchar>",
      "desugaredQualType" : "ImVector<unsigned short>"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiInputTextCallbackData",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Shared state of InputText(), passed as an argument to your callback when a ImGuiInputTextFlags_Callback* flag is used."
        }, {
          "@type" : "AstTextComment",
          "text" : " The callback function should return 0 by default."
        }, {
          "@type" : "AstTextComment",
          "text" : " Callbacks (follow a flag name and see comments in ImGuiInputTextFlags_ declarations for more details)"
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackEdit:        Callback on buffer edit (note that InputText() already returns true on edit, the callback is useful mainly to manipulate the underlying buffer while focus is active)"
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackAlways:      Callback on each iteration"
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackCompletion:  Callback on pressing TAB"
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackHistory:     Callback on pressing Up/Down arrows"
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackCharFilter:  Callback on character inputs to replace or discard them. Modify 'EventChar' to replace or discard, or return 1 in callback to discard."
        }, {
          "@type" : "AstTextComment",
          "text" : " - ImGuiInputTextFlags_CallbackResize:      Callback on buffer capacity changes request (beyond 'buf_size' parameter value), allowing the string to grow."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "EventFlag",
      "qualType" : "ImGuiInputTextFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Flags",
      "qualType" : "ImGuiInputTextFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "EventChar",
      "qualType" : "ImWchar",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "EventKey",
      "qualType" : "ImGuiKey",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Buf",
      "qualType" : "char *",
      "desugaredQualType" : "char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BufTextLen",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BufSize",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "BufDirty",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CursorPos",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SelectionStart",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SelectionEnd",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DeleteChars",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "bytes_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "InsertChars",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SelectAll",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearSelection",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "HasSelection",
      "resultType" : "bool"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiSizeCallbackData",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Resizing callback data to apply custom constraint. As enabled by SetNextWindowSizeConstraints(). Callback is called during the next Begin()."
        }, {
          "@type" : "AstTextComment",
          "text" : " NB: For basic min/max size constraint on each axis you don't need to use the callback! The SetNextWindowSizeConstraints() parameters are enough."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Pos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CurrentSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DesiredSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiWindowClass",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " [ALPHA] Rarely used / very advanced uses only. Use with SetNextWindowClass() and DockSpace() functions."
        }, {
          "@type" : "AstTextComment",
          "text" : " Important: the content of this class is still highly WIP and likely to change and be refactored"
        }, {
          "@type" : "AstTextComment",
          "text" : " before we stabilize Docking features. Please be mindful if using this."
        }, {
          "@type" : "AstTextComment",
          "text" : " Provide hints:"
        }, {
          "@type" : "AstTextComment",
          "text" : " - To the platform backend via altered viewport flags (enable/disable OS decoration, OS task bar icons, etc.)"
        }, {
          "@type" : "AstTextComment",
          "text" : " - To the platform backend for OS level parent/child relationships of viewport."
        }, {
          "@type" : "AstTextComment",
          "text" : " - To the docking system for various options and filtering."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ClassId",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ParentViewportId",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ViewportFlagsOverrideSet",
      "qualType" : "ImGuiViewportFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ViewportFlagsOverrideClear",
      "qualType" : "ImGuiViewportFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TabItemFlagsOverrideSet",
      "qualType" : "ImGuiTabItemFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DockNodeFlagsOverrideSet",
      "qualType" : "ImGuiDockNodeFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DockingAlwaysTabBar",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DockingAllowUnclassed",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiPayload",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Data payload for Drag and Drop operations: AcceptDragDropPayload(), GetDragDropPayload()"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Data",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DataSize",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SourceId",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SourceParentId",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DataFrameCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DataType",
      "qualType" : "char[33]",
      "desugaredQualType" : "char[33]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Preview",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Delivery",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsDataType",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "type",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsPreview",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsDelivery",
      "resultType" : "bool"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiTableColumnSortSpecs",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Sorting specification for one column of a table (sizeof == 12 bytes)"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ColumnUserID",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ColumnIndex",
      "qualType" : "ImS16",
      "desugaredQualType" : "short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SortOrder",
      "qualType" : "ImS16",
      "desugaredQualType" : "short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SortDirection",
      "qualType" : "ImGuiSortDirection",
      "desugaredQualType" : "int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiTableSortSpecs",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Sorting specifications for a table (often handling sort specs for a single column, occasionally more)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Obtained by calling TableGetSortSpecs()."
        }, {
          "@type" : "AstTextComment",
          "text" : " When 'SpecsDirty == true' you can sort your data. It will be true with sorting specs have changed since last call, or the first time."
        }, {
          "@type" : "AstTextComment",
          "text" : " Make sure to set 'SpecsDirty = false' after sorting, else you may wastefully sort your data every frame!"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Specs",
      "qualType" : "const ImGuiTableColumnSortSpecs *",
      "desugaredQualType" : "const ImGuiTableColumnSortSpecs *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SpecsCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SpecsDirty",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiOnceUponAFrame",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: Execute a block of code at maximum once a frame. Convenient if you want to quickly create an UI within deep-nested code that runs multiple times every frame."
        }, {
          "@type" : "AstTextComment",
          "text" : " Usage: static ImGuiOnceUponAFrame oaf; if (oaf) ImGui::Text(\"This will be called only once per frame\");"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "RefFrame",
      "qualType" : "int",
      "desugaredQualType" : "int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiTextFilter",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: Parse and apply text filters. In format \"aaaaa[,bbbb][,ccccc]\""
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Draw",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "\"Filter (inc,-exc)\""
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "width",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PassFilter",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Build",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsActive",
      "resultType" : "bool"
    }, {
      "@type" : "AstRecordDecl",
      "name" : "ImGuiTextRange",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " [Internal]"
          } ]
        } ]
      }, {
        "@type" : "AstFieldDecl",
        "name" : "b",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFieldDecl",
        "name" : "e",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstFunctionDecl",
        "name" : "empty",
        "resultType" : "bool"
      }, {
        "@type" : "AstFunctionDecl",
        "name" : "split",
        "resultType" : "void",
        "decls" : [ {
          "@type" : "AstParmVarDecl",
          "name" : "separator",
          "qualType" : "char",
          "desugaredQualType" : "char"
        }, {
          "@type" : "AstParmVarDecl",
          "name" : "out",
          "qualType" : "ImVector<ImGuiTextRange> *",
          "desugaredQualType" : "ImVector<ImGuiTextRange> *"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "InputBuf",
      "qualType" : "char[256]",
      "desugaredQualType" : "char[256]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Filters",
      "qualType" : "ImVector<ImGuiTextRange>",
      "desugaredQualType" : "ImVector<ImGuiTextFilter::ImGuiTextRange>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CountGrep",
      "qualType" : "int",
      "desugaredQualType" : "int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiTextBuffer",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: Growable text buffer for logging/accumulating text"
        }, {
          "@type" : "AstTextComment",
          "text" : " (this could be called 'ImGuiTextBuilder' / 'ImGuiStringBuilder')"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Buf",
      "qualType" : "ImVector<char>",
      "desugaredQualType" : "ImVector<char>"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "begin",
      "resultType" : "const char *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "end",
      "resultType" : "const char *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "size",
      "resultType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "empty",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "reserve",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "capacity",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "c_str",
      "resultType" : "const char *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "append",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "str_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "appendf",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "appendfv",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fmt",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "args",
        "qualType" : "va_list",
        "desugaredQualType" : "char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "#FORMAT_ATTR_MARKER#",
        "qualType" : "#FORMAT_ATTR_MARKER#",
        "desugaredQualType" : "#FORMAT_ATTR_MARKER#"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiStorage",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: Key->Value storage"
        }, {
          "@type" : "AstTextComment",
          "text" : " Typically you don't have to worry about this since a storage is held within each Window."
        }, {
          "@type" : "AstTextComment",
          "text" : " We use it to e.g. store collapse state for a tree (Int 0/1)"
        }, {
          "@type" : "AstTextComment",
          "text" : " This is optimized for efficient lookup (dichotomy into a contiguous buffer) and rare insertion (typically tied to user interactions aka max once a frame)"
        }, {
          "@type" : "AstTextComment",
          "text" : " You can use it as custom user storage for temporary values. Declare your own storage if, for example:"
        }, {
          "@type" : "AstTextComment",
          "text" : " - You want to manipulate the open/close state of a particular sub-tree in your interface (tree node uses Int 0/1 to store their state)."
        }, {
          "@type" : "AstTextComment",
          "text" : " - You want to store custom debug data easily without adding or editing structures in your code (probably not efficient, but convenient)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Types are NOT stored, so it is up to you to make sure your Key don't collide with different types."
        } ]
      } ]
    }, {
      "@type" : "AstRecordDecl",
      "name" : "ImGuiStoragePair",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " [Internal]"
          } ]
        } ]
      }, {
        "@type" : "AstFieldDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Data",
      "qualType" : "ImVector<ImGuiStoragePair>",
      "desugaredQualType" : "ImVector<ImGuiStorage::ImGuiStoragePair>"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " - Get***() functions find pair, never add/allocate. Pairs are sorted so a query is O(log N)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Set***() functions find pair, insertion on demand if missing."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Sorted insertion is costly, paid once. A typical frame shouldn't need to insert any new pair."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetInt",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetInt",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetBool",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetBool",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFloat",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetFloat",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetVoidPtr",
      "resultType" : "void *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetVoidPtr",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetIntRef",
      "resultType" : "int *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " - Get***Ref() functions finds pair, insert on demand if missing, return pointer. Useful if you intend to do Get+Set."
          }, {
            "@type" : "AstTextComment",
            "text" : " - References are only valid until a new value is added to the storage. Calling a Set***() function or a Get***Ref() function invalidates the pointer."
          }, {
            "@type" : "AstTextComment",
            "text" : " - A typical use case where this is convenient for quick hacking (e.g. add storage during a live Edit"
          }, {
            "@type" : "AstTextComment",
            "text" : "&Continue"
          }, {
            "@type" : "AstTextComment",
            "text" : " session if you can't modify existing struct)"
          }, {
            "@type" : "AstTextComment",
            "text" : "      float* pvar = ImGui::GetFloatRef(key); ImGui::SliderFloat(\"var\", pvar, 0, 100.0f); some_var += *pvar;"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetBoolRef",
      "resultType" : "bool *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetFloatRef",
      "resultType" : "float *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetVoidPtrRef",
      "resultType" : "void **",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiID",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "default_val",
        "qualType" : "void *",
        "desugaredQualType" : "void *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetAllInt",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "val",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Use on your own storage if you know only integer are being stored (open/close all tree nodes)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BuildSortByKey",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " For quicker full rebuild of a storage (instead of an incremental one), you may add all your contents and then sort once."
          } ]
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiListClipper",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: Manually clip large list of items."
        }, {
          "@type" : "AstTextComment",
          "text" : " If you have lots evenly spaced items and you have a random access to the list, you can perform coarse"
        }, {
          "@type" : "AstTextComment",
          "text" : " clipping based on visibility to only submit items that are in view."
        }, {
          "@type" : "AstTextComment",
          "text" : " The clipper calculates the range of visible items and advance the cursor to compensate for the non-visible items we have skipped."
        }, {
          "@type" : "AstTextComment",
          "text" : " (Dear ImGui already clip items based on their bounds but: it needs to first layout the item to do so, and generally"
        }, {
          "@type" : "AstTextComment",
          "text" : "  fetching/submitting your own data incurs additional cost. Coarse clipping using ImGuiListClipper allows you to easily"
        }, {
          "@type" : "AstTextComment",
          "text" : "  scale using lists with tens of thousands of items without a problem)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Usage:"
        }, {
          "@type" : "AstTextComment",
          "text" : "   ImGuiListClipper clipper;"
        }, {
          "@type" : "AstTextComment",
          "text" : "   clipper.Begin(1000);         // We have 1000 elements, evenly spaced."
        }, {
          "@type" : "AstTextComment",
          "text" : "   while (clipper.Step())"
        }, {
          "@type" : "AstTextComment",
          "text" : "       for (int i = clipper.DisplayStart; i "
        }, {
          "@type" : "AstTextComment",
          "text" : "<"
        }, {
          "@type" : "AstTextComment",
          "text" : " clipper.DisplayEnd; i++)"
        }, {
          "@type" : "AstTextComment",
          "text" : "           ImGui::Text(\"line number %d\", i);"
        }, {
          "@type" : "AstTextComment",
          "text" : " Generally what happens is:"
        }, {
          "@type" : "AstTextComment",
          "text" : " - Clipper lets you process the first element (DisplayStart = 0, DisplayEnd = 1) regardless of it being visible or not."
        }, {
          "@type" : "AstTextComment",
          "text" : " - User code submit that one element."
        }, {
          "@type" : "AstTextComment",
          "text" : " - Clipper can measure the height of the first element"
        }, {
          "@type" : "AstTextComment",
          "text" : " - Clipper calculate the actual range of elements to display based on the current clipping rectangle, position the cursor before the first visible element."
        }, {
          "@type" : "AstTextComment",
          "text" : " - User code submit visible elements."
        }, {
          "@type" : "AstTextComment",
          "text" : " - The clipper also handles various subtleties related to keyboard/gamepad navigation, wrapping etc."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplayStart",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplayEnd",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ItemsCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ItemsHeight",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "StartPosY",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TempData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Begin",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_height",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "-1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "End",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Step",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ForceDisplayRangeByIndices",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "item_min",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "item_max",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Call ForceDisplayRangeByIndices() before first call to Step() if you need a range of items to be displayed regardless of visibility."
          } ]
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImColor",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper: ImColor() implicitly converts colors to either ImU32 (packed 4x1 byte) or ImVec4 (4x1 float)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Prefer using IM_COL32() macros if you want a guaranteed compile-time ImU32 for usage with ImDrawList API."
        }, {
          "@type" : "AstTextComment",
          "text" : " **Avoid storing ImColor! Store either u32 of ImVec4. This is not a full-featured color class. MAY OBSOLETE."
        }, {
          "@type" : "AstTextComment",
          "text" : " **None of the ImGui API are using ImColor directly but you can use it as a convenience to pass colors in either ImU32 or ImVec4 formats. Explicitly cast to ImU32 or ImVec4 if needed."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Value",
      "qualType" : "ImVec4",
      "desugaredQualType" : "ImVec4"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetHSV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "h",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "s",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " FIXME-OBSOLETE: May need to obsolete/cleanup those helpers."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "HSV",
      "resultType" : "ImColor",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "h",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "s",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawCmd",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Typically, 1 command = 1 GPU draw call (unless command is a callback)"
        }, {
          "@type" : "AstTextComment",
          "text" : " - VtxOffset: When 'io.BackendFlags "
        }, {
          "@type" : "AstTextComment",
          "text" : "&"
        }, {
          "@type" : "AstTextComment",
          "text" : " ImGuiBackendFlags_RendererHasVtxOffset' is enabled,"
        }, {
          "@type" : "AstTextComment",
          "text" : "   this fields allow us to render meshes larger than 64K vertices while keeping 16-bit indices."
        }, {
          "@type" : "AstTextComment",
          "text" : "   Backends made for "
        }, {
          "@type" : "AstTextComment",
          "text" : "<"
        }, {
          "@type" : "AstTextComment",
          "text" : "1.71. will typically ignore the VtxOffset fields."
        }, {
          "@type" : "AstTextComment",
          "text" : " - The ClipRect/TextureId/VtxOffset fields must be contiguous as we memcmp() them together (this is asserted for)."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ClipRect",
      "qualType" : "ImVec4",
      "desugaredQualType" : "ImVec4"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TextureId",
      "qualType" : "ImTextureID",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "VtxOffset",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IdxOffset",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ElemCount",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UserCallback",
      "qualType" : "ImDrawCallback",
      "desugaredQualType" : "void (*)(const ImDrawList *, const ImDrawCmd *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UserCallbackData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTexID",
      "resultType" : "ImTextureID",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Since 1.83: returns ImTextureID associated with this draw call. Warning: DO NOT assume this is always same as 'TextureId' (we will change this function for an upcoming feature)"
          } ]
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawVert",
    "decls" : [ {
      "@type" : "AstFieldDecl",
      "name" : "pos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "uv",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "col",
      "qualType" : "ImU32",
      "desugaredQualType" : "unsigned int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawCmdHeader",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " [Internal] For use by ImDrawList"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ClipRect",
      "qualType" : "ImVec4",
      "desugaredQualType" : "ImVec4"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TextureId",
      "qualType" : "ImTextureID",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "VtxOffset",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawChannel",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " [Internal] For use by ImDrawListSplitter"
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawListSplitter",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Split/Merge functions are used to split the draw list into different layers which can be drawn into out of order."
        }, {
          "@type" : "AstTextComment",
          "text" : " This is used by the Columns/Tables API, so items of each column can be batched together in a same draw call."
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearFreeMemory",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Split",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "draw_list",
        "qualType" : "ImDrawList *",
        "desugaredQualType" : "ImDrawList *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Merge",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "draw_list",
        "qualType" : "ImDrawList *",
        "desugaredQualType" : "ImDrawList *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetCurrentChannel",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "draw_list",
        "qualType" : "ImDrawList *",
        "desugaredQualType" : "ImDrawList *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "channel_idx",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImDrawFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImDrawList functions"
        }, {
          "@type" : "AstTextComment",
          "text" : " (Legacy: bit 0 must always correspond to ImDrawFlags_Closed to be backward compatible with old API using a bool. Bits 1..3 must be unused)"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_None",
      "qualType" : "ImDrawFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_Closed",
      "docComment" : "PathStroke(), AddPolyline(): specify that shape should be closed (Important: this is always == 1 for legacy reason)",
      "qualType" : "ImDrawFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersTopLeft",
      "docComment" : "AddRect(), AddRectFilled(), PathRect(): enable rounding top-left corner only (when rounding > 0.0f, we default to all corners). Was 0x01.",
      "qualType" : "ImDrawFlags_",
      "order" : 2,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersTopRight",
      "docComment" : "AddRect(), AddRectFilled(), PathRect(): enable rounding top-right corner only (when rounding > 0.0f, we default to all corners). Was 0x02.",
      "qualType" : "ImDrawFlags_",
      "order" : 3,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersBottomLeft",
      "docComment" : "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-left corner only (when rounding > 0.0f, we default to all corners). Was 0x04.",
      "qualType" : "ImDrawFlags_",
      "order" : 4,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersBottomRight",
      "docComment" : "AddRect(), AddRectFilled(), PathRect(): enable rounding bottom-right corner only (when rounding > 0.0f, we default to all corners). Wax 0x08.",
      "qualType" : "ImDrawFlags_",
      "order" : 5,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersNone",
      "docComment" : "AddRect(), AddRectFilled(), PathRect(): disable rounding on all corners (when rounding > 0.0f). This is NOT zero, NOT an implicit flag!",
      "qualType" : "ImDrawFlags_",
      "order" : 6,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersTop",
      "qualType" : "ImDrawFlags_",
      "order" : 7,
      "value" : "ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight",
      "evaluatedValue" : 48
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersBottom",
      "qualType" : "ImDrawFlags_",
      "order" : 8,
      "value" : "ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight",
      "evaluatedValue" : 192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersLeft",
      "qualType" : "ImDrawFlags_",
      "order" : 9,
      "value" : "ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersTopLeft",
      "evaluatedValue" : 80
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersRight",
      "qualType" : "ImDrawFlags_",
      "order" : 10,
      "value" : "ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_RoundCornersTopRight",
      "evaluatedValue" : 160
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersAll",
      "qualType" : "ImDrawFlags_",
      "order" : 11,
      "value" : "ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersTopRight | ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_RoundCornersBottomRight",
      "evaluatedValue" : 240
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersDefault_",
      "docComment" : "Default to ALL corners if none of the _RoundCornersXX flags are specified.",
      "qualType" : "ImDrawFlags_",
      "order" : 12,
      "value" : "ImDrawFlags_RoundCornersAll",
      "evaluatedValue" : 240
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawFlags_RoundCornersMask_",
      "qualType" : "ImDrawFlags_",
      "order" : 13,
      "value" : "ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCornersNone",
      "evaluatedValue" : 496
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImDrawListFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImDrawList instance. Those are set automatically by ImGui:: functions from ImGuiIO settings, and generally not manipulated directly."
        }, {
          "@type" : "AstTextComment",
          "text" : " It is however possible to temporarily alter flags between calls to ImDrawList:: functions."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawListFlags_None",
      "qualType" : "ImDrawListFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawListFlags_AntiAliasedLines",
      "docComment" : "Enable anti-aliased lines/borders (*2 the number of triangles for 1.0f wide line or lines thin enough to be drawn using textures, otherwise *3 the number of triangles)",
      "qualType" : "ImDrawListFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawListFlags_AntiAliasedLinesUseTex",
      "docComment" : "Enable anti-aliased lines/borders using textures when possible. Require backend to render with bilinear filtering (NOT point/nearest filtering).",
      "qualType" : "ImDrawListFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawListFlags_AntiAliasedFill",
      "docComment" : "Enable anti-aliased edge around filled shapes (rounded rectangles, circles).",
      "qualType" : "ImDrawListFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawListFlags_AllowVtxOffset",
      "docComment" : "Can emit 'VtxOffset > 0' to allow large meshes. Set when 'ImGuiBackendFlags_RendererHasVtxOffset' is enabled.",
      "qualType" : "ImDrawListFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawList",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Draw command list"
        }, {
          "@type" : "AstTextComment",
          "text" : " This is the low-level list of polygons that ImGui:: functions are filling. At the end of the frame,"
        }, {
          "@type" : "AstTextComment",
          "text" : " all command lists are passed to your ImGuiIO::RenderDrawListFn function for rendering."
        }, {
          "@type" : "AstTextComment",
          "text" : " Each dear imgui window contains its own ImDrawList. You can use ImGui::GetWindowDrawList() to"
        }, {
          "@type" : "AstTextComment",
          "text" : " access the current window draw list and draw custom primitives."
        }, {
          "@type" : "AstTextComment",
          "text" : " You can interleave normal ImGui:: calls and adding primitives to the current draw list."
        }, {
          "@type" : "AstTextComment",
          "text" : " In single viewport mode, top-left is == GetMainViewport()->Pos (generally 0,0), bottom-right is == GetMainViewport()->Pos+Size (generally io.DisplaySize)."
        }, {
          "@type" : "AstTextComment",
          "text" : " You are totally free to apply whatever transformation matrix to want to the data (depending on the use of the transformation you may want to apply it to ClipRect as well!)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Important: Primitives are always added to the list and not culled (culling is done at higher-level by ImGui:: functions), if you use this API a lot consider coarse culling your drawn objects."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CmdBuffer",
      "qualType" : "ImVector<ImDrawCmd>",
      "desugaredQualType" : "ImVector<ImDrawCmd>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IdxBuffer",
      "qualType" : "ImVector<ImDrawIdx>",
      "desugaredQualType" : "ImVector<unsigned short>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "VtxBuffer",
      "qualType" : "ImVector<ImDrawVert>",
      "desugaredQualType" : "ImVector<ImDrawVert>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Flags",
      "qualType" : "ImDrawListFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushClipRect",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "clip_rect_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "clip_rect_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "intersect_with_current_clip_rect",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushClipRectFullScreen",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopClipRect",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PushTextureID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PopTextureID",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetClipRectMin",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetClipRectMax",
      "resultType" : "ImVec2"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddLine",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Primitives"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing."
          }, {
            "@type" : "AstTextComment",
            "text" : " - For rectangular primitives, \"p_min\" and \"p_max\" represent the upper-left and lower-right corners."
          }, {
            "@type" : "AstTextComment",
            "text" : " - For circle primitives, use \"num_segments == 0\" to automatically calculate tessellation (preferred)."
          }, {
            "@type" : "AstTextComment",
            "text" : "   In older versions (until Dear ImGui 1.77) the AddCircle functions defaulted to num_segments == 12."
          }, {
            "@type" : "AstTextComment",
            "text" : "   In future versions we will use textures to provide cheaper and higher-quality circles."
          }, {
            "@type" : "AstTextComment",
            "text" : "   Use AddNgon() and AddNgonFilled() functions if you need to guaranteed a specific number of sides."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddRect",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rounding",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddRectFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rounding",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddRectFilledMultiColor",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col_upr_left",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col_upr_right",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col_bot_right",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col_bot_left",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddQuad",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddQuadFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddTriangle",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddTriangleFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddCircle",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddCircleFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddNgon",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddNgonFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font",
        "qualType" : "const ImFont *",
        "desugaredQualType" : "const ImFont *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_size",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_width",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cpu_fine_clip_rect",
        "qualType" : "const ImVec4 *",
        "desugaredQualType" : "const ImVec4 *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddPolyline",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "points",
        "qualType" : "const ImVec2 *",
        "desugaredQualType" : "const ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_points",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddConvexPolyFilled",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "points",
        "qualType" : "const ImVec2 *",
        "desugaredQualType" : "const ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_points",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddBezierCubic",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddBezierQuadratic",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddImage",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "user_texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(1, 1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int",
        "defaultValue" : "IM_COL32_WHITE"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Image primitives"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Read FAQ to understand what ImTextureID is."
          }, {
            "@type" : "AstTextComment",
            "text" : " - \"p_min\" and \"p_max\" represent the upper-left and lower-right corners of the rectangle."
          }, {
            "@type" : "AstTextComment",
            "text" : " - \"uv_min\" and \"uv_max\" represent the normalized texture coordinates to use for those corners. Using (0,0)->(1,1) texture coordinates will generally display the entire texture."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddImageQuad",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "user_texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(1, 0)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(1, 1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 1)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int",
        "defaultValue" : "IM_COL32_WHITE"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddImageRounded",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "user_texture_id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rounding",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathClear",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Stateful path API, add points then finish with PathFillConvex() or PathStroke()"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Filled shapes must always use clockwise winding order. The anti-aliasing fringe depends on it. Counter-clockwise shapes will have \"inward\" anti-aliasing."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathLineTo",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathLineToMergeDuplicate",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathFillConvex",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathStroke",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "1.0f"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathArcTo",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathArcToFast",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "center",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "radius",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a_min_of_12",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "a_max_of_12",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathBezierCubicCurveTo",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathBezierQuadraticCurveTo",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathRect",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "rect_min",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rect_max",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "rounding",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "flags",
        "qualType" : "ImDrawFlags",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddCallback",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "callback",
        "qualType" : "ImDrawCallback",
        "desugaredQualType" : "void (*)(const ImDrawList *, const ImDrawCmd *)"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "callback_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Advanced"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddDrawCmd",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CloneOutput",
      "resultType" : "ImDrawList *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ChannelsSplit",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Advanced: Channels"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use to split render into layers. By switching channels to can render out-of-order (e.g. submit FG primitives before BG primitives)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - Use to minimize draw calls (e.g. if going back-and-forth between multiple clipping rectangles, prefer to append into separate channels then merge at the end)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - FIXME-OBSOLETE: This API shouldn't have been in ImDrawList in the first place!"
          }, {
            "@type" : "AstTextComment",
            "text" : "   Prefer using your own persistent instance of ImDrawListSplitter as you can stack them."
          }, {
            "@type" : "AstTextComment",
            "text" : "   Using the ImDrawList::ChannelsXXXX you cannot stack a split over another."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ChannelsMerge",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ChannelsSetCurrent",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "n",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimReserve",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "vtx_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Advanced: Primitives allocations"
          }, {
            "@type" : "AstTextComment",
            "text" : " - We render triangles (three vertices)"
          }, {
            "@type" : "AstTextComment",
            "text" : " - All primitives needs to be reserved via PrimReserve() beforehand."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimUnreserve",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "vtx_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimRect",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "a",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "b",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimRectUV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "a",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "b",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_a",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_b",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimQuadUV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "a",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "b",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "d",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_a",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_b",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_c",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv_d",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimWriteVtx",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimWriteIdx",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "idx",
        "qualType" : "ImDrawIdx",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PrimVtx",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "uv",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddBezierCurve",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p1",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "thickness",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "PathBezierCurveTo",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "p2",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p3",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p4",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "num_segments",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "0"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImDrawData",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " All draw data to render a Dear ImGui frame"
        }, {
          "@type" : "AstTextComment",
          "text" : " (NB: the style and the naming convention here is a little inconsistent, we currently preserve them for backward compatibility purpose,"
        }, {
          "@type" : "AstTextComment",
          "text" : " as this is one of the oldest structure exposed by the library! Basically, ImDrawList == CmdList)"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Valid",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CmdListsCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TotalIdxCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TotalVtxCount",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CmdLists",
      "qualType" : "ImDrawList **",
      "desugaredQualType" : "ImDrawList **"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplayPos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DisplaySize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FramebufferScale",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "OwnerViewport",
      "qualType" : "ImGuiViewport *",
      "desugaredQualType" : "ImGuiViewport *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DeIndexAllBuffers",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ScaleClipRects",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "fb_scale",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFontConfig",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " [SECTION] Font API (ImFontConfig, ImFontGlyph, ImFontAtlasFlags, ImFontAtlas, ImFontGlyphRangesBuilder, ImFont)"
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontDataSize",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontDataOwnedByAtlas",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontNo",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "SizePixels",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "OversampleH",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "OversampleV",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PixelSnapH",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphExtraSpacing",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphOffset",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphRanges",
      "qualType" : "const ImWchar *",
      "desugaredQualType" : "const ImWchar *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphMinAdvanceX",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphMaxAdvanceX",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MergeMode",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontBuilderFlags",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "RasterizerMultiply",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "EllipsisChar",
      "qualType" : "ImWchar",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Name",
      "qualType" : "char[40]",
      "desugaredQualType" : "char[40]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DstFont",
      "qualType" : "ImFont *",
      "desugaredQualType" : "ImFont *"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFontGlyph",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Hold rendering data for one glyph."
        }, {
          "@type" : "AstTextComment",
          "text" : " (Note: some language parsers may fail to convert the 31+1 bitfield members, in this case maybe drop store a single u32 or we can rework this)"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Colored",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Visible",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Codepoint",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "AdvanceX",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "X0",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Y0",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "X1",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Y1",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "U0",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "V0",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "U1",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "V1",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFontGlyphRangesBuilder",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Helper to build glyph ranges from text/string data. Feed your application strings/characters to it then call BuildRanges()."
        }, {
          "@type" : "AstTextComment",
          "text" : " This is essentially a tightly packed of vector of 64k booleans = 8KB storage."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "UsedChars",
      "qualType" : "ImVector<ImU32>",
      "desugaredQualType" : "ImVector<unsigned int>"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetBit",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "n",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetBit",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "n",
        "qualType" : "size_t",
        "desugaredQualType" : "unsigned long"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddChar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddRanges",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "ranges",
        "qualType" : "const ImWchar *",
        "desugaredQualType" : "const ImWchar *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BuildRanges",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "out_ranges",
        "qualType" : "ImVector<ImWchar> *",
        "desugaredQualType" : "ImVector<ImWchar> *"
      } ]
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFontAtlasCustomRect",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " See ImFontAtlas::AddCustomRectXXX functions."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Width",
      "qualType" : "unsigned short",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Height",
      "qualType" : "unsigned short",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "X",
      "qualType" : "unsigned short",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Y",
      "qualType" : "unsigned short",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphID",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphAdvanceX",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "GlyphOffset",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Font",
      "qualType" : "ImFont *",
      "desugaredQualType" : "ImFont *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsPacked",
      "resultType" : "bool"
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImFontAtlasFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags for ImFontAtlas build"
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImFontAtlasFlags_None",
      "qualType" : "ImFontAtlasFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImFontAtlasFlags_NoPowerOfTwoHeight",
      "docComment" : "Don't round the height to next power of two",
      "qualType" : "ImFontAtlasFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImFontAtlasFlags_NoMouseCursors",
      "docComment" : "Don't build software mouse cursors into the atlas (save a little texture memory)",
      "qualType" : "ImFontAtlasFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImFontAtlasFlags_NoBakedLines",
      "docComment" : "Don't build thick line textures into the atlas (save a little texture memory, allow support for point/nearest filtering). The AntiAliasedLinesUseTex features uses them, otherwise they will be rendered using polygons (more expensive for CPU/GPU).",
      "qualType" : "ImFontAtlasFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFontAtlas",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Load and rasterize multiple TTF/OTF fonts into a same texture. The font atlas will build a single texture holding:"
        }, {
          "@type" : "AstTextComment",
          "text" : "  - One or more fonts."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Custom graphics data needed to render the shapes needed by Dear ImGui."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Mouse cursor shapes for software cursor rendering (unless setting 'Flags |= ImFontAtlasFlags_NoMouseCursors' in the font atlas)."
        }, {
          "@type" : "AstTextComment",
          "text" : " It is the user-code responsibility to setup/build the atlas, then upload the pixel data into a texture accessible by your graphics api."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Optionally, call any of the AddFont*** functions. If you don't call any, the default font embedded in the code will be loaded for you."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Call GetTexDataAsAlpha8() or GetTexDataAsRGBA32() to build and retrieve pixels data."
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Upload the pixels data into a texture within your graphics system (see imgui_impl_xxxx.cpp examples)"
        }, {
          "@type" : "AstTextComment",
          "text" : "  - Call SetTexID(my_tex_id); and pass the pointer/identifier to your texture in a format natural to your graphics API."
        }, {
          "@type" : "AstTextComment",
          "text" : "    This value will be passed back to you during rendering to identify the texture. Read FAQ entry about ImTextureID for more details."
        }, {
          "@type" : "AstTextComment",
          "text" : " Common pitfalls:"
        }, {
          "@type" : "AstTextComment",
          "text" : " - If you pass a 'glyph_ranges' array to AddFont*** functions, you need to make sure that your array persist up until the"
        }, {
          "@type" : "AstTextComment",
          "text" : "   atlas is build (when calling GetTexData*** or Build()). We only copy the pointer, not the data."
        }, {
          "@type" : "AstTextComment",
          "text" : " - Important: By default, AddFontFromMemoryTTF() takes ownership of the data. Even though we are not writing to it, we will free the pointer on destruction."
        }, {
          "@type" : "AstTextComment",
          "text" : "   You can set font_cfg->FontDataOwnedByAtlas=false to keep ownership of your data and it won't be freed,"
        }, {
          "@type" : "AstTextComment",
          "text" : " - Even though many functions are suffixed with \"TTF\", OTF data is supported just as well."
        }, {
          "@type" : "AstTextComment",
          "text" : " - This is an old API and it is currently awkward for those and and various other reasons! We will address them in the future!"
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFont",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFontDefault",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFontFromFileTTF",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "filename",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_pixels",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "glyph_ranges",
        "qualType" : "const ImWchar *",
        "desugaredQualType" : "const ImWchar *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFontFromMemoryTTF",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_size",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_pixels",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "glyph_ranges",
        "qualType" : "const ImWchar *",
        "desugaredQualType" : "const ImWchar *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFontFromMemoryCompressedTTF",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "compressed_font_data",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "compressed_font_size",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_pixels",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "glyph_ranges",
        "qualType" : "const ImWchar *",
        "desugaredQualType" : "const ImWchar *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddFontFromMemoryCompressedBase85TTF",
      "resultType" : "ImFont *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "compressed_font_data_base85",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size_pixels",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "font_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "glyph_ranges",
        "qualType" : "const ImWchar *",
        "desugaredQualType" : "const ImWchar *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearInputData",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearTexData",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearFonts",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Clear",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "Build",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Build atlas, retrieve pixel data."
          }, {
            "@type" : "AstTextComment",
            "text" : " User is in charge of copying the pixels into graphics memory (e.g. create a texture with your engine). Then store your texture handle with SetTexID()."
          }, {
            "@type" : "AstTextComment",
            "text" : " The pitch is always = Width * BytesPerPixels (1 or 4)"
          }, {
            "@type" : "AstTextComment",
            "text" : " Building in RGBA32 format is provided for convenience and compatibility, but note that unless you manually manipulate or copy color data into"
          }, {
            "@type" : "AstTextComment",
            "text" : " the texture (e.g. when using the AddCustomRect*** api), then the RGB pixels emitted will always be white (~75% of memory/bandwidth waste."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTexDataAsAlpha8",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "out_pixels",
        "qualType" : "unsigned char **",
        "desugaredQualType" : "unsigned char **"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_width",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_height",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_bytes_per_pixel",
        "qualType" : "int *",
        "desugaredQualType" : "int *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetTexDataAsRGBA32",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "out_pixels",
        "qualType" : "unsigned char **",
        "desugaredQualType" : "unsigned char **"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_width",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_height",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_bytes_per_pixel",
        "qualType" : "int *",
        "desugaredQualType" : "int *",
        "defaultValue" : "NULL"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsBuilt",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetTexID",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImTextureID",
        "desugaredQualType" : "void *"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesDefault",
      "resultType" : "const ImWchar *",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Helpers to retrieve list of common Unicode ranges (2 value per range, values are inclusive, zero-terminated list)"
          }, {
            "@type" : "AstTextComment",
            "text" : " NB: Make sure that your string are UTF-8 and NOT in your local code page. In C++11, you can create UTF-8 string literal using the u8\"Hello world\" syntax. See FAQ for details."
          }, {
            "@type" : "AstTextComment",
            "text" : " NB: Consider using ImFontGlyphRangesBuilder to build glyph ranges from textual data."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesKorean",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesJapanese",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesChineseFull",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesChineseSimplifiedCommon",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesCyrillic",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesThai",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetGlyphRangesVietnamese",
      "resultType" : "const ImWchar *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddCustomRectRegular",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "width",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "height",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " You can request arbitrary rectangles to be packed into the atlas, for your own purposes."
          }, {
            "@type" : "AstTextComment",
            "text" : " - After calling Build(), you can query the rectangle position and render your pixels."
          }, {
            "@type" : "AstTextComment",
            "text" : " - If you render colored output, set 'atlas->TexPixelsUseColors = true' as this may help some backends decide of prefered texture format."
          }, {
            "@type" : "AstTextComment",
            "text" : " - You can also request your rectangles to be mapped as font glyph (given a font + Unicode point),"
          }, {
            "@type" : "AstTextComment",
            "text" : "   so you can render e.g. custom colorful icons and use them as regular glyphs."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Read docs/FONTS.md for more details about using colorful icons."
          }, {
            "@type" : "AstTextComment",
            "text" : " - Note: this API may be redesigned later in order to support multi-monitor varying DPI settings."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddCustomRectFontGlyph",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "font",
        "qualType" : "ImFont *",
        "desugaredQualType" : "ImFont *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "id",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "width",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "height",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "advance_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "offset",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCustomRectByIndex",
      "resultType" : "ImFontAtlasCustomRect *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "index",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcCustomRectUV",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "rect",
        "qualType" : "const ImFontAtlasCustomRect *",
        "desugaredQualType" : "const ImFontAtlasCustomRect *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_uv_min",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_uv_max",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " [Internal]"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetMouseCursorTexData",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "cursor",
        "qualType" : "ImGuiMouseCursor",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_offset",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_size",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_uv_border",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_uv_fill",
        "qualType" : "ImVec2 *",
        "desugaredQualType" : "ImVec2 *"
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Flags",
      "qualType" : "ImFontAtlasFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexID",
      "qualType" : "ImTextureID",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexDesiredWidth",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexGlyphPadding",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Locked",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexReady",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexPixelsUseColors",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexPixelsAlpha8",
      "qualType" : "unsigned char *",
      "desugaredQualType" : "unsigned char *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexPixelsRGBA32",
      "qualType" : "unsigned int *",
      "desugaredQualType" : "unsigned int *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexWidth",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexHeight",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexUvScale",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexUvWhitePixel",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Fonts",
      "qualType" : "ImVector<ImFont *>",
      "desugaredQualType" : "ImVector<ImFont *>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "CustomRects",
      "qualType" : "ImVector<ImFontAtlasCustomRect>",
      "desugaredQualType" : "ImVector<ImFontAtlasCustomRect>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigData",
      "qualType" : "ImVector<ImFontConfig>",
      "desugaredQualType" : "ImVector<ImFontConfig>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "TexUvLines",
      "qualType" : "ImVec4[64]",
      "desugaredQualType" : "ImVec4[64]"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontBuilderIO",
      "qualType" : "const ImFontBuilderIO *",
      "desugaredQualType" : "const ImFontBuilderIO *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontBuilderFlags",
      "qualType" : "unsigned int",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PackIdMouseCursors",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PackIdLines",
      "qualType" : "int",
      "desugaredQualType" : "int"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImFont",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Font runtime data and rendering"
        }, {
          "@type" : "AstTextComment",
          "text" : " ImFontAtlas automatically loads a default embedded font for you when you call GetTexDataAsAlpha8() or GetTexDataAsRGBA32()."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IndexAdvanceX",
      "qualType" : "ImVector<float>",
      "desugaredQualType" : "ImVector<float>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FallbackAdvanceX",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FontSize",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "IndexLookup",
      "qualType" : "ImVector<ImWchar>",
      "desugaredQualType" : "ImVector<unsigned short>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Glyphs",
      "qualType" : "ImVector<ImFontGlyph>",
      "desugaredQualType" : "ImVector<ImFontGlyph>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FallbackGlyph",
      "qualType" : "const ImFontGlyph *",
      "desugaredQualType" : "const ImFontGlyph *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ContainerAtlas",
      "qualType" : "ImFontAtlas *",
      "desugaredQualType" : "ImFontAtlas *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigData",
      "qualType" : "const ImFontConfig *",
      "desugaredQualType" : "const ImFontConfig *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ConfigDataCount",
      "qualType" : "short",
      "desugaredQualType" : "short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "FallbackChar",
      "qualType" : "ImWchar",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "EllipsisChar",
      "qualType" : "ImWchar",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DotChar",
      "qualType" : "ImWchar",
      "desugaredQualType" : "unsigned short"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DirtyLookupTables",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Scale",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Ascent",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Descent",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MetricsTotalSurface",
      "qualType" : "int",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Used4kPagesMap",
      "qualType" : "ImU8[2]",
      "desugaredQualType" : "ImU8[2]"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "FindGlyph",
      "resultType" : "const ImFontGlyph *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "FindGlyphNoFallback",
      "resultType" : "const ImFontGlyph *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCharAdvance",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsLoaded",
      "resultType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetDebugName",
      "resultType" : "const char *"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcTextSizeA",
      "resultType" : "ImVec2",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "max_width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "remaining",
        "qualType" : "const char **",
        "desugaredQualType" : "const char **",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " 'max_width' stops rendering after a certain width (could be turned into a 2d size). FLT_MAX to disable."
          }, {
            "@type" : "AstTextComment",
            "text" : " 'wrap_width' enable automatic word-wrapping across multiple lines to fit into given width. 0.0f to disable."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcWordWrapPositionA",
      "resultType" : "const char *",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "scale",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_width",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "RenderChar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "draw_list",
        "qualType" : "ImDrawList *",
        "desugaredQualType" : "ImDrawList *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "RenderText",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "draw_list",
        "qualType" : "ImDrawList *",
        "desugaredQualType" : "ImDrawList *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "pos",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "col",
        "qualType" : "ImU32",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "clip_rect",
        "qualType" : "const ImVec4 &",
        "desugaredQualType" : "const ImVec4 &"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_begin",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "text_end",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "wrap_width",
        "qualType" : "float",
        "desugaredQualType" : "float",
        "defaultValue" : "0.0f"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "cpu_fine_clip",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "false"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BuildLookupTable",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " [Internal] Don't use!"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ClearOutputData",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GrowIndex",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "new_size",
        "qualType" : "int",
        "desugaredQualType" : "int"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddGlyph",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "src_cfg",
        "qualType" : "const ImFontConfig *",
        "desugaredQualType" : "const ImFontConfig *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "x0",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "y0",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "x1",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "y1",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "u0",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v0",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "u1",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v1",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "advance_x",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "AddRemapChar",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "dst",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "src",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "overwrite_dst",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SetGlyphVisible",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c",
        "qualType" : "ImWchar",
        "desugaredQualType" : "unsigned short"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "visible",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "IsGlyphRangeUnused",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "c_begin",
        "qualType" : "unsigned int",
        "desugaredQualType" : "unsigned int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "c_last",
        "qualType" : "unsigned int",
        "desugaredQualType" : "unsigned int"
      } ]
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiViewportFlags_",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " Flags stored in ImGuiViewport::Flags, giving indications to the platform backends."
        } ]
      } ]
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_None",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 0,
      "value" : "0",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_IsPlatformWindow",
      "docComment" : "Represent a Platform Window",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 1,
      "value" : "1 << 0",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_IsPlatformMonitor",
      "docComment" : "Represent a Platform Monitor (unused yet)",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 2,
      "value" : "1 << 1",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_OwnedByApp",
      "docComment" : "Platform Window: is created/managed by the application (rather than a dear imgui backend)",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 3,
      "value" : "1 << 2",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoDecoration",
      "docComment" : "Platform Window: Disable platform decorations: title bar, borders, etc. (generally set all windows, but if ImGuiConfigFlags_ViewportsDecoration is set we only set this on popups/tooltips)",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 4,
      "value" : "1 << 3",
      "evaluatedValue" : 8
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoTaskBarIcon",
      "docComment" : "Platform Window: Disable platform task bar icon (generally set on popups/tooltips, or all windows if ImGuiConfigFlags_ViewportsNoTaskBarIcon is set)",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 5,
      "value" : "1 << 4",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoFocusOnAppearing",
      "docComment" : "Platform Window: Don't take focus when created.",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 6,
      "value" : "1 << 5",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoFocusOnClick",
      "docComment" : "Platform Window: Don't take focus when clicked on.",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 7,
      "value" : "1 << 6",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoInputs",
      "docComment" : "Platform Window: Make mouse pass through so we can drag this window while peaking behind it.",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 8,
      "value" : "1 << 7",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoRendererClear",
      "docComment" : "Platform Window: Renderer doesn't need to clear the framebuffer ahead (because we will fill it entirely).",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 9,
      "value" : "1 << 8",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_TopMost",
      "docComment" : "Platform Window: Display on top (for tooltips only).",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 10,
      "value" : "1 << 9",
      "evaluatedValue" : 512
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_Minimized",
      "docComment" : "Platform Window: Window is minimized, can skip render. When minimized we tend to avoid using the viewport pos/size for clipping window or testing if they are contained in the viewport.",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 11,
      "value" : "1 << 10",
      "evaluatedValue" : 1024
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_NoAutoMerge",
      "docComment" : "Platform Window: Avoid merging this window into another host window. This can only be set via ImGuiWindowClass viewport flags override (because we need to now ahead if we are going to create a viewport in the first place!).",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 12,
      "value" : "1 << 11",
      "evaluatedValue" : 2048
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiViewportFlags_CanHostOtherWindows",
      "docComment" : "Main viewport: can host multiple imgui windows (secondary viewports are associated to a single window).",
      "qualType" : "ImGuiViewportFlags_",
      "order" : 13,
      "value" : "1 << 12",
      "evaluatedValue" : 4096
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiViewport",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " - Currently represents the Platform Window created by the application which is hosting our Dear ImGui windows."
        }, {
          "@type" : "AstTextComment",
          "text" : " - With multi-viewport enabled, we extend this concept to have multiple active viewports."
        }, {
          "@type" : "AstTextComment",
          "text" : " - In the future we will extend this concept further to also represent Platform Monitor and support a \"no main platform window\" operation mode."
        }, {
          "@type" : "AstTextComment",
          "text" : " - About Main Area vs Work Area:"
        }, {
          "@type" : "AstTextComment",
          "text" : "   - Main Area = entire viewport."
        }, {
          "@type" : "AstTextComment",
          "text" : "   - Work Area = entire viewport minus sections used by main menu bars (for platform windows), or by task bar (for platform monitor)."
        }, {
          "@type" : "AstTextComment",
          "text" : "   - Windows are generally trying to stay within the Work Area of their host viewport."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ID",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Flags",
      "qualType" : "ImGuiViewportFlags",
      "desugaredQualType" : "int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Pos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Size",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WorkPos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WorkSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DpiScale",
      "qualType" : "float",
      "desugaredQualType" : "float"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "ParentViewportId",
      "qualType" : "ImGuiID",
      "desugaredQualType" : "unsigned int"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DrawData",
      "qualType" : "ImDrawData *",
      "desugaredQualType" : "ImDrawData *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "RendererUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformUserData",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformHandle",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformHandleRaw",
      "qualType" : "void *",
      "desugaredQualType" : "void *"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformRequestMove",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformRequestResize",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "PlatformRequestClose",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetCenter",
      "resultType" : "ImVec2",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " Helpers"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWorkCenter",
      "resultType" : "ImVec2"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiPlatformIO",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " (Optional) Access via ImGui::GetPlatformIO()"
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_CreateWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_DestroyWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_ShowWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SetWindowPos",
      "qualType" : "void (*)(ImGuiViewport *, ImVec2)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, ImVec2)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_GetWindowPos",
      "qualType" : "ImVec2 (*)(ImGuiViewport *)",
      "desugaredQualType" : "ImVec2 (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SetWindowSize",
      "qualType" : "void (*)(ImGuiViewport *, ImVec2)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, ImVec2)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_GetWindowSize",
      "qualType" : "ImVec2 (*)(ImGuiViewport *)",
      "desugaredQualType" : "ImVec2 (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SetWindowFocus",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_GetWindowFocus",
      "qualType" : "bool (*)(ImGuiViewport *)",
      "desugaredQualType" : "bool (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_GetWindowMinimized",
      "qualType" : "bool (*)(ImGuiViewport *)",
      "desugaredQualType" : "bool (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SetWindowTitle",
      "qualType" : "void (*)(ImGuiViewport *, const char *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, const char *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SetWindowAlpha",
      "qualType" : "void (*)(ImGuiViewport *, float)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, float)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_UpdateWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_RenderWindow",
      "qualType" : "void (*)(ImGuiViewport *, void *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, void *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_SwapBuffers",
      "qualType" : "void (*)(ImGuiViewport *, void *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, void *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_GetWindowDpiScale",
      "qualType" : "float (*)(ImGuiViewport *)",
      "desugaredQualType" : "float (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_OnChangedViewport",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Platform_CreateVkSurface",
      "qualType" : "int (*)(ImGuiViewport *, ImU64, const void *, ImU64 *)",
      "desugaredQualType" : "int (*)(ImGuiViewport *, ImU64, const void *, ImU64 *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Renderer_CreateWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Renderer_DestroyWindow",
      "qualType" : "void (*)(ImGuiViewport *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Renderer_SetWindowSize",
      "qualType" : "void (*)(ImGuiViewport *, ImVec2)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, ImVec2)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Renderer_RenderWindow",
      "qualType" : "void (*)(ImGuiViewport *, void *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, void *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Renderer_SwapBuffers",
      "qualType" : "void (*)(ImGuiViewport *, void *)",
      "desugaredQualType" : "void (*)(ImGuiViewport *, void *)"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Monitors",
      "qualType" : "ImVector<ImGuiPlatformMonitor>",
      "desugaredQualType" : "ImVector<ImGuiPlatformMonitor>"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "Viewports",
      "qualType" : "ImVector<ImGuiViewport *>",
      "desugaredQualType" : "ImVector<ImGuiViewport *>"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiPlatformMonitor",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " (Optional) This is required when enabling multi-viewport. Represent the bounds of each connected monitor/display and their DPI."
        }, {
          "@type" : "AstTextComment",
          "text" : " We use this information for multiple DPI support + clamping the position of popups and tooltips so they don't straddle multiple monitors."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MainPos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "MainSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WorkPos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WorkSize",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "DpiScale",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstRecordDecl",
    "name" : "ImGuiPlatformImeData",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : " (Optional) Support for IME (Input Method Editor) via the io.SetPlatformImeDataFn() function."
        } ]
      } ]
    }, {
      "@type" : "AstFieldDecl",
      "name" : "WantVisible",
      "qualType" : "bool",
      "desugaredQualType" : "bool"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "InputPos",
      "qualType" : "ImVec2",
      "desugaredQualType" : "ImVec2"
    }, {
      "@type" : "AstFieldDecl",
      "name" : "InputLineHeight",
      "qualType" : "float",
      "desugaredQualType" : "float"
    } ]
  }, {
    "@type" : "AstNamespaceDecl",
    "name" : "ImGui",
    "decls" : [ {
      "@type" : "AstFullComment",
      "decls" : [ {
        "@type" : "AstParagraphComment",
        "decls" : [ {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        }, {
          "@type" : "AstTextComment",
          "text" : " [SECTION] Obsolete functions and types"
        }, {
          "@type" : "AstTextComment",
          "text" : " (Will be removed! Read 'API BREAKING CHANGES' section in imgui.cpp for details)"
        }, {
          "@type" : "AstTextComment",
          "text" : " Please keep your copy of dear imgui up to date! Occasionally set '#define IMGUI_DISABLE_OBSOLETE_FUNCTIONS' in imconfig.h to stay ahead."
        }, {
          "@type" : "AstTextComment",
          "text" : "-----------------------------------------------------------------------------"
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetKeyIndex",
      "resultType" : "int",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "key",
        "qualType" : "ImGuiKey",
        "desugaredQualType" : "int"
      } ]
    } ]
  }, {
    "@type" : "AstNamespaceDecl",
    "name" : "ImGui",
    "decls" : [ {
      "@type" : "AstFunctionDecl",
      "name" : "CaptureKeyboardFromApp",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "want_capture_keyboard",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.88 (from May 2022)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CaptureMouseFromApp",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "want_capture_mouse",
        "qualType" : "bool",
        "desugaredQualType" : "bool",
        "defaultValue" : "true"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "CalcListClipping",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_height",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_items_display_start",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "out_items_display_end",
        "qualType" : "int *",
        "desugaredQualType" : "int *"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.86 (from November 2021)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "GetWindowContentRegionWidth",
      "resultType" : "float",
      "decls" : [ {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.85 (from August 2021)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ListBoxHeader",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "items_count",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "height_in_items",
        "qualType" : "int",
        "desugaredQualType" : "int",
        "defaultValue" : "-1"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.81 (from February 2021)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ListBoxHeader",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "size",
        "qualType" : "const ImVec2 &",
        "desugaredQualType" : "const ImVec2 &",
        "defaultValue" : "ImVec2(0, 0)"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "ListBoxFooter",
      "resultType" : "void"
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "OpenPopupContextItem",
      "resultType" : "void",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *",
        "defaultValue" : "NULL"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "mb",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int",
        "defaultValue" : "1"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.79 (from August 2020)"
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.78 (from June 2020)"
          }, {
            "@type" : "AstTextComment",
            "text" : " Old drag/sliders functions that took a 'float power = 1.0' argument instead of flags."
          }, {
            "@type" : "AstTextComment",
            "text" : " For shared code, you can version check at compile-time with `#if IMGUI_VERSION_NUM >= 17704`."
          } ]
        } ]
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragScalarN",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "components",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "DragFloat4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_speed",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderScalar",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderScalarN",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "data_type",
        "qualType" : "ImGuiDataType",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_data",
        "qualType" : "void *",
        "desugaredQualType" : "void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "components",
        "qualType" : "int",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_min",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "p_max",
        "qualType" : "const void *",
        "desugaredQualType" : "const void *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat2",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat3",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "SliderFloat4",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "label",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v",
        "qualType" : "float *",
        "desugaredQualType" : "float *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_min",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "v_max",
        "qualType" : "float",
        "desugaredQualType" : "float"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "format",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "power",
        "qualType" : "float",
        "desugaredQualType" : "float"
      } ]
    }, {
      "@type" : "AstFunctionDecl",
      "name" : "BeginPopupContextWindow",
      "resultType" : "bool",
      "decls" : [ {
        "@type" : "AstParmVarDecl",
        "name" : "str_id",
        "qualType" : "const char *",
        "desugaredQualType" : "const char *"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "mb",
        "qualType" : "ImGuiMouseButton",
        "desugaredQualType" : "int"
      }, {
        "@type" : "AstParmVarDecl",
        "name" : "over_items",
        "qualType" : "bool",
        "desugaredQualType" : "bool"
      }, {
        "@type" : "AstFullComment",
        "decls" : [ {
          "@type" : "AstParagraphComment",
          "decls" : [ {
            "@type" : "AstTextComment",
            "text" : " OBSOLETED in 1.77 (from June 2020)"
          } ]
        } ]
      } ]
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImDrawCornerFlags_",
    "decls" : [ {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_None",
      "docComment" : "Was == 0 prior to 1.82, this is now == ImDrawFlags_RoundCornersNone which is != 0 and not implicit",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 0,
      "value" : "ImDrawFlags_RoundCornersNone",
      "evaluatedValue" : 256
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_TopLeft",
      "docComment" : "Was == 0x01 (1 < < 0) prior to 1.82. Order matches ImDrawFlags_NoRoundCorner* flag (we exploit this internally).",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 1,
      "value" : "ImDrawFlags_RoundCornersTopLeft",
      "evaluatedValue" : 16
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_TopRight",
      "docComment" : "Was == 0x02 (1 < < 1) prior to 1.82.",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 2,
      "value" : "ImDrawFlags_RoundCornersTopRight",
      "evaluatedValue" : 32
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_BotLeft",
      "docComment" : "Was == 0x04 (1 < < 2) prior to 1.82.",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 3,
      "value" : "ImDrawFlags_RoundCornersBottomLeft",
      "evaluatedValue" : 64
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_BotRight",
      "docComment" : "Was == 0x08 (1 < < 3) prior to 1.82.",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 4,
      "value" : "ImDrawFlags_RoundCornersBottomRight",
      "evaluatedValue" : 128
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_All",
      "docComment" : "Was == 0x0F prior to 1.82",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 5,
      "value" : "ImDrawFlags_RoundCornersAll",
      "evaluatedValue" : 240
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_Top",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 6,
      "value" : "ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight",
      "evaluatedValue" : 48
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_Bot",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 7,
      "value" : "ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight",
      "evaluatedValue" : 192
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_Left",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 8,
      "value" : "ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft",
      "evaluatedValue" : 80
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImDrawCornerFlags_Right",
      "qualType" : "ImDrawCornerFlags_",
      "order" : 9,
      "value" : "ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight",
      "evaluatedValue" : 160
    } ]
  }, {
    "@type" : "AstEnumDecl",
    "name" : "ImGuiKeyModFlags_",
    "decls" : [ {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKeyModFlags_None",
      "qualType" : "ImGuiKeyModFlags_",
      "order" : 0,
      "value" : "ImGuiModFlags_None",
      "evaluatedValue" : 0
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKeyModFlags_Ctrl",
      "qualType" : "ImGuiKeyModFlags_",
      "order" : 1,
      "value" : "ImGuiModFlags_Ctrl",
      "evaluatedValue" : 1
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKeyModFlags_Shift",
      "qualType" : "ImGuiKeyModFlags_",
      "order" : 2,
      "value" : "ImGuiModFlags_Shift",
      "evaluatedValue" : 2
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKeyModFlags_Alt",
      "qualType" : "ImGuiKeyModFlags_",
      "order" : 3,
      "value" : "ImGuiModFlags_Alt",
      "evaluatedValue" : 4
    }, {
      "@type" : "AstEnumConstantDecl",
      "name" : "ImGuiKeyModFlags_Super",
      "qualType" : "ImGuiKeyModFlags_",
      "order" : 4,
      "value" : "ImGuiModFlags_Super",
      "evaluatedValue" : 8
    } ]
  } ]
}